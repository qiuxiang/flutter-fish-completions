complete -c flutter -f -n "__fish_seen_subcommand_from channel" -a "(flutter channel | tail -n +2 | sed 's/\s//g' | sed 's/*\(\w\+\)/\1\tcurrent/')"
function __fish_flutter_devices
  flutter devices | tail -n +3 | sed -r 's/ \(\w+\)\s+• /\t/g'
end
function __fish_flutter_emulators
  flutter emulators | head -n -7 | tail -n +3 | sed -r 's/(\w+)(\s+)• /\1\t/'
end
function __fish_flutter_target_platforms
  flutter build apk -h | grep android-arm | sed -r 's/\s+\[|\]|\)//g' | sed -r 's/, /\n/g' | sed -r 's/ \(/\t/g' | sed -r 's/x86/x86\t /'
end
complete -c flutter -l "help" -d "Print this usage information." -s h
complete -c flutter -l "verbose" -d "Noisy logging, including all shell commands executed. If used with \"--help\", shows hidden options. If used with \"flutter doctor\", shows additional diagnostic information. (Use \"-vv\" to force verbose logging in those cases.)" -s v
complete -c flutter -l "prefixed-errors" -d "Causes lines sent to stderr to be prefixed with \"ERROR:\"."
complete -c flutter -l "quiet" -d "Reduce the amount of output from some commands."
complete -c flutter -l "wrap" -d "Toggles output word wrapping, regardless of whether or not the output is a terminal. (defaults to on)"
complete -c flutter -l "no-wrap" -d "Toggles output word wrapping, regardless of whether or not the output is a terminal. (defaults to on)"
complete -c flutter -l "wrap-column" -d "Sets the output wrap column. If not set, uses the width of the terminal. No wrapping occurs if not writing to a terminal. Use \"--no-wrap\" to turn off wrapping when connected to a terminal."
complete -c flutter -l "device-id" -d "Target device id or name (prefixes allowed)." -s d -xa "(__fish_flutter_devices)"
complete -c flutter -l "version" -d "Reports the version of this tool."
complete -c flutter -l "machine" -d "When used with the \"--version\" flag, outputs the information using JSON."
complete -c flutter -l "color" -d "Whether to use terminal colors (requires support for ANSI escape sequences). (defaults to on)"
complete -c flutter -l "no-color" -d "Whether to use terminal colors (requires support for ANSI escape sequences). (defaults to on)"
complete -c flutter -l "version-check" -d "Allow Flutter to check for updates when this command runs. (defaults to on)"
complete -c flutter -l "no-version-check" -d "Allow Flutter to check for updates when this command runs. (defaults to on)"
complete -c flutter -l "suppress-analytics" -d "Suppress analytics reporting for the current CLI invocation."
complete -c flutter -l "disable-telemetry" -d "Disable telemetry reporting when this command runs."
complete -c flutter -l "packages" -d "Path to your \"package_config.json\" file."
complete -c flutter -l "local-engine-src-path" -d "Path to your engine src directory, if you are building Flutter locally. Defaults to $FLUTTER_ENGINE if set, otherwise defaults to the path given in your pubspec.yaml dependency_overrides for sky_engine, if any."
complete -c flutter -l "local-engine" -d "Name of a build output within the engine out directory, if you are building Flutter locally. Use this to select a specific version of the engine if you have built multiple engine targets. This path is relative to \"--local-engine-src-path\" (see above)."
complete -c flutter -l "local-web-sdk" -d "Name of a build output within the engine out directory, if you are building Flutter locally. Use this to select a specific version of the web sdk if you have built multiple engine targets. This path is relative to \"--local-engine-src-path\" (see above)."
complete -c flutter -l "show-test-device" -d "List the special \"flutter-tester\" device in device listings. This headless device is used to test Flutter tooling."
complete -c flutter -l "show-web-server-device" -d "List the special \"web-server\" device in device listings."
set -l commands bash-completion channel config doctor downgrade precache upgrade analyze assemble build clean create drive gen-l10n pub run test attach custom-devices daemon debug-adapter devices emulators install logs screenshot symbolize ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a bash-completion -d "Output command line shell completion setup scripts."
complete -c flutter -l "overwrite" -d "Causes the given shell completion setup script to be overwritten if it already exists." -n "__fish_seen_subcommand_from bash-completion"
complete -c flutter -l "no-overwrite" -d "Causes the given shell completion setup script to be overwritten if it already exists." -n "__fish_seen_subcommand_from bash-completion"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a channel -d "List or switch Flutter channels."
complete -c flutter -l "all" -d "Include all the available branches (including local branches) when listing channels." -n "__fish_seen_subcommand_from channel"
complete -c flutter -l "no-all" -d "Include all the available branches (including local branches) when listing channels." -n "__fish_seen_subcommand_from channel"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a config -d "Configure Flutter settings."
complete -c flutter -l "analytics" -d "Enable or disable reporting anonymously tool usage statistics and crash reports." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "no-analytics" -d "Enable or disable reporting anonymously tool usage statistics and crash reports." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "clear-ios-signing-cert" -d "Clear the saved development certificate choice used to sign apps for iOS device deployment." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "android-sdk" -d "The Android SDK directory." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "android-studio-dir" -d "The Android Studio install directory. If unset, flutter will search for valid installs at well-known locations." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "build-dir" -d "The relative path to override a projects build directory." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "machine" -d "Print config values as json." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "enable-web" -d "Enable or disable Flutter for web. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "no-enable-web" -d "Enable or disable Flutter for web. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "enable-linux-desktop" -d "Enable or disable support for desktop on Linux. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "no-enable-linux-desktop" -d "Enable or disable support for desktop on Linux. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "enable-macos-desktop" -d "Enable or disable support for desktop on macOS. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "no-enable-macos-desktop" -d "Enable or disable support for desktop on macOS. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "enable-windows-desktop" -d "Enable or disable support for desktop on Windows. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "no-enable-windows-desktop" -d "Enable or disable support for desktop on Windows. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "single-widget-reload-optimization" -d "Enable or disable Hot reload optimization for changes to class body of a single widget. This setting will take effect on the master and beta channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "no-single-widget-reload-optimization" -d "Enable or disable Hot reload optimization for changes to class body of a single widget. This setting will take effect on the master and beta channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "enable-android" -d "Enable or disable Flutter for Android. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "no-enable-android" -d "Enable or disable Flutter for Android. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "enable-ios" -d "Enable or disable Flutter for iOS. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "no-enable-ios" -d "Enable or disable Flutter for iOS. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "enable-fuchsia" -d "Enable or disable Flutter for Fuchsia. This setting will take effect on the master channel." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "no-enable-fuchsia" -d "Enable or disable Flutter for Fuchsia. This setting will take effect on the master channel." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "enable-custom-devices" -d "Enable or disable Early support for custom device types. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "no-enable-custom-devices" -d "Enable or disable Early support for custom device types. This setting will take effect on the master, beta, and stable channels." -n "__fish_seen_subcommand_from config"
complete -c flutter -l "clear-features" -d "Remove all configured features and restore them to the default values. No settings have been configured." -n "__fish_seen_subcommand_from config"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a doctor -d "Show information about the installed tooling."
complete -c flutter -l "android-licenses" -d "Run the Android SDK manager tool to accept the SDK's licenses." -n "__fish_seen_subcommand_from doctor"
complete -c flutter -l "check-for-remote-artifacts" -d "revision git hash>    Used to determine if Flutter engine artifacts for all platforms are available for download." -n "__fish_seen_subcommand_from doctor"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a downgrade -d "Downgrade Flutter to the last active version for the current channel."
complete -c flutter -l "working-directory" -d "Override the downgrade working directory. This is only intended to enable integration testing of the tool itself." -n "__fish_seen_subcommand_from downgrade"
complete -c flutter -l "prompt" -d "Show the downgrade prompt. The ability to disable this using \"--no-prompt\" is only provided for integration testing of the tool itself. (defaults to on)" -n "__fish_seen_subcommand_from downgrade"
complete -c flutter -l "no-prompt" -d "Show the downgrade prompt. The ability to disable this using \"--no-prompt\" is only provided for integration testing of the tool itself. (defaults to on)" -n "__fish_seen_subcommand_from downgrade"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a precache -d "Populate the Flutter tool's cache of binary artifacts."
complete -c flutter -l "all-platforms" -d "Precache artifacts for all host platforms." -s a -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "force" -d "Force re-downloading of artifacts." -s f -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "android" -d "Precache artifacts for Android development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-android" -d "Precache artifacts for Android development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "android_gen_snapshot" -d "Precache gen_snapshot for Android development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-android_gen_snapshot" -d "Precache gen_snapshot for Android development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "android_maven" -d "Precache Gradle dependencies for Android development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-android_maven" -d "Precache Gradle dependencies for Android development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "android_internal_build" -d "Precache dependencies for internal Android development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-android_internal_build" -d "Precache dependencies for internal Android development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "ios" -d "Precache artifacts for iOS development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-ios" -d "Precache artifacts for iOS development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "web" -d "Precache artifacts for web development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-web" -d "Precache artifacts for web development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "linux" -d "Precache artifacts for Linux desktop development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-linux" -d "Precache artifacts for Linux desktop development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "windows" -d "Precache artifacts for Windows desktop development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-windows" -d "Precache artifacts for Windows desktop development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "macos" -d "Precache artifacts for macOS desktop development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-macos" -d "Precache artifacts for macOS desktop development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "fuchsia" -d "Precache artifacts for Fuchsia development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-fuchsia" -d "Precache artifacts for Fuchsia development." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "universal" -d "Precache artifacts required for any development platform. (defaults to on)" -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-universal" -d "Precache artifacts required for any development platform. (defaults to on)" -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "flutter_runner" -d "Precache the flutter runner artifacts." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-flutter_runner" -d "Precache the flutter runner artifacts." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "use-unsigned-mac-binaries" -d "Precache the unsigned macOS binaries when available." -n "__fish_seen_subcommand_from precache"
complete -c flutter -l "no-use-unsigned-mac-binaries" -d "Precache the unsigned macOS binaries when available." -n "__fish_seen_subcommand_from precache"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a upgrade -d "Upgrade your copy of Flutter."
complete -c flutter -l "force" -d "Force upgrade the flutter branch, potentially discarding local changes." -s f -n "__fish_seen_subcommand_from upgrade"
complete -c flutter -l "continue" -d "Trigger the second half of the upgrade flow. This should not be invoked manually. It is used re-entrantly by the standard upgrade command after the new version of Flutter is available, to hand off the upgrade process from the old version to the new version." -n "__fish_seen_subcommand_from upgrade"
complete -c flutter -l "working-directory" -d "Override the upgrade working directory. This is only intended to enable integration testing of the tool itself." -n "__fish_seen_subcommand_from upgrade"
complete -c flutter -l "verify-only" -d "Checks for any new Flutter updates, without actually fetching them." -n "__fish_seen_subcommand_from upgrade"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a analyze -d "Analyze the project's Dart code."
complete -c flutter -l "flutter-repo" -d "Include all the examples and tests from the Flutter repository." -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "current-package" -d "Analyze the current project, if applicable. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "no-current-package" -d "Analyze the current project, if applicable. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "dartdocs" -d "(deprecated) List every public member that is lacking documentation. This command will be removed in a future version of Flutter." -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "watch" -d "Run analysis continuously, watching the filesystem for changes." -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "write" -d "Also output the results to a file. This is useful with \"--watch\" if you want a file to always contain the latest results." -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "dart-sdk" -d "The path to the Dart SDK." -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "protocol-traffic-log" -d "The path to write the request and response protocol. This is only intended to be used for debugging the tooling." -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "suggestions" -d "Show suggestions about the current flutter project." -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "no-suggestions" -d "Show suggestions about the current flutter project." -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "machine" -d "Dumps a JSON with a subset of relevant data about the tool, project, and environment." -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "benchmark" -d "Also output the analysis time." -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "no-pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "congratulate" -d "Show output even when there are no errors, warnings, hints, or lints. Ignored if \"--watch\" is specified. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "no-congratulate" -d "Show output even when there are no errors, warnings, hints, or lints. Ignored if \"--watch\" is specified. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "preamble" -d "When analyzing the flutter repository, display the number of files that will be analyzed. Ignored if \"--watch\" is specified. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "no-preamble" -d "When analyzing the flutter repository, display the number of files that will be analyzed. Ignored if \"--watch\" is specified. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "fatal-infos" -d "Treat info level issues as fatal. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "no-fatal-infos" -d "Treat info level issues as fatal. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "fatal-warnings" -d "Treat warning level issues as fatal. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -l "no-fatal-warnings" -d "Treat warning level issues as fatal. (defaults to on)" -n "__fish_seen_subcommand_from analyze"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a assemble -d "Assemble and build Flutter resources."
complete -c flutter -l "define" -d "Allows passing configuration to a target, as in \"--define=target=key=value\"." -s d -n "__fish_seen_subcommand_from assemble"
complete -c flutter -l "performance-measurement-file" -d "Output individual target performance to a JSON file." -n "__fish_seen_subcommand_from assemble"
complete -c flutter -l "input" -d "Allows passing additional inputs with \"--input=key=value\". Unlike defines, additional inputs do not generate a new configuration; instead they are treated as dependencies of the targets that use them." -s i -n "__fish_seen_subcommand_from assemble"
complete -c flutter -l "depfile" -d "A file path where a depfile will be written. This contains all build inputs and outputs in a Make-style syntax." -n "__fish_seen_subcommand_from assemble"
complete -c flutter -l "build-inputs" -d "A file path where a newline-separated file containing all inputs used will be written after a build. This file is not included as a build input or output. This file is not written if the build fails for any reason." -n "__fish_seen_subcommand_from assemble"
complete -c flutter -l "build-outputs" -d "A file path where a newline-separated file containing all outputs created will be written after a build. This file is not included as a build input or output. This file is not written if the build fails for any reason." -n "__fish_seen_subcommand_from assemble"
complete -c flutter -l "output" -d "A directory where output files will be written. Must be either absolute or relative from the root of the current Flutter project." -s o -n "__fish_seen_subcommand_from assemble"
complete -c flutter -l "extra-front-end-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart front end. For example, \"--extra-front-end-options=--enable-experiment=nonfunction-type-aliases\"." -n "__fish_seen_subcommand_from assemble"
complete -c flutter -l "extra-gen-snapshot-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart native compiler. (Only used in \"--profile\" or \"--release\" builds.) For example, \"--extra-gen-snapshot-options=--no-strip\"." -n "__fish_seen_subcommand_from assemble"
complete -c flutter -l "dart-define" -d "Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors. Multiple defines can be passed by repeating \"--dart-define\" multiple times." -n "__fish_seen_subcommand_from assemble"
complete -c flutter -l "dart-define-from-file" -d "The path of a json format file where flutter define a global constant pool. Json entry will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors; the key and field are json values. Multiple defines can be passed by repeating \"--dart-define-from-file\" multiple times." -n "__fish_seen_subcommand_from assemble"
complete -c flutter -l "resource-pool-size" -d "The maximum number of concurrent tasks the build system will run." -n "__fish_seen_subcommand_from assemble"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a build -d "Build an executable app or install bundle."
set -l build_commands aar apk appbundle bundle linux web
complete -c flutter -f -n "__fish_seen_subcommand_from build; and not __fish_seen_subcommand_from $build_commands" -a aar -d "Build a repository containing an AAR and a POM file."
complete -c flutter -l "fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "no-fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "debug" -d "Build a debug version of the current project. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "no-debug" -d "Build a debug version of the current project. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "profile" -d "Build a version of the current project specialized for performance profiling. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "no-profile" -d "Build a version of the current project specialized for performance profiling. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "release" -d "Build a release version of the current project. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "no-release" -d "Build a release version of the current project. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "tree-shake-icons" -d "Tree shake icon fonts so that only glyphs used by the application remain. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "no-tree-shake-icons" -d "Tree shake icon fonts so that only glyphs used by the application remain. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "flavor" -d "Build a custom app flavor as defined by platform-specific build setup. Supports the use of product flavors in Android Gradle scripts, and the use of custom Xcode schemes." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "build-number" -d "An identifier used as an internal version number. Each build must have a unique identifier to differentiate it from previous builds. It is used to determine whether one build is more recent than another, with higher numbers indicating more recent build. On Android it is used as \"versionCode\". On Xcode builds it is used as \"CFBundleVersion\". On Windows it is used as the build suffix for the product and file versions." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "output" -d "The absolute path to the directory where the repository is generated. By default, this is <current-directory>/build/<target-platform>. Currently supported for subcommands: aar, web." -s o -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "no-pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "split-debug-info" -d "In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with \"--analyze-size\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "obfuscate" -d "In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with \"--split-debug-info\" option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace.  Because all identifiers are renamed, methods like Object.runtimeType, Type.toString, Enum.toString, Stacktrace.toString, Symbol.toString (for constant symbols or those generated by runtime system) will return obfuscated results. Any code or tests that rely on exact names will break." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "no-obfuscate" -d "In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with \"--split-debug-info\" option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace.  Because all identifiers are renamed, methods like Object.runtimeType, Type.toString, Enum.toString, Stacktrace.toString, Symbol.toString (for constant symbols or those generated by runtime system) will return obfuscated results. Any code or tests that rely on exact names will break." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "dart-define" -d "Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors. Multiple defines can be passed by repeating \"--dart-define\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "dart-define-from-file" -d "The path of a json format file where flutter define a global constant pool. Json entry will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors; the key and field are json values. Multiple defines can be passed by repeating \"--dart-define-from-file\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "extra-front-end-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart front end. For example, \"--extra-front-end-options=--enable-experiment=nonfunction-type-aliases\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "extra-gen-snapshot-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart native compiler. (Only used in \"--profile\" or \"--release\" builds.) For example, \"--extra-gen-snapshot-options=--no-strip\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "no-track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "enable-experiment" -d "The name of an experimental Dart feature to enable. For more information see: https://github.com/dart-lang/sdk/blob/main/docs/process/experimental-flags.md" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "android-gradle-daemon" -d "Whether to enable the Gradle daemon when performing an Android build. Starting the daemon is the default behavior of the gradle wrapper script created in a Flutter project. Setting this flag to false corresponds to passing \"--no-daemon\" to the gradle wrapper script. This flag will cause the daemon process to terminate after the build is completed. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "no-android-gradle-daemon" -d "Whether to enable the Gradle daemon when performing an Android build. Starting the daemon is the default behavior of the gradle wrapper script created in a Flutter project. Setting this flag to false corresponds to passing \"--no-daemon\" to the gradle wrapper script. This flag will cause the daemon process to terminate after the build is completed. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "android-project-arg" -d "Additional arguments specified as key=value that are passed directly to the gradle project via the -P flag. These can be accessed in build.gradle via the \"project.property\" API." -s P -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar"
complete -c flutter -l "target-platform" -d "The target platform for which the project is compiled. [android-arm (default), android-arm64 (default), android-x86, android-x64 (default)]" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from aar" -xa "(__fish_flutter_target_platforms)"
complete -c flutter -f -n "__fish_seen_subcommand_from build; and not __fish_seen_subcommand_from $build_commands" -a apk -d "Build an Android APK file from your app."
complete -c flutter -l "fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "no-fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "tree-shake-icons" -d "Tree shake icon fonts so that only glyphs used by the application remain. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "no-tree-shake-icons" -d "Tree shake icon fonts so that only glyphs used by the application remain. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "target" -d "The main entry-point file of the application, as run on the device. If the \"--target\" option is omitted, but a file name is provided on the command line, then that is used instead. (defaults to \"lib/main.dart\")" -s t -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "debug" -d "Build a debug version of your app." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "profile" -d "Build a version of your app specialized for performance profiling." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "release" -d "Build a release version of your app (default mode)." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "jit-release" -d "Build a JIT release version of your app (default mode)." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "flavor" -d "Build a custom app flavor as defined by platform-specific build setup. Supports the use of product flavors in Android Gradle scripts, and the use of custom Xcode schemes." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "no-pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "build-number" -d "An identifier used as an internal version number. Each build must have a unique identifier to differentiate it from previous builds. It is used to determine whether one build is more recent than another, with higher numbers indicating more recent build. On Android it is used as \"versionCode\". On Xcode builds it is used as \"CFBundleVersion\". On Windows it is used as the build suffix for the product and file versions." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "build-name" -d "A \"x.y.z\" string used as the version number shown to users. For each new version of your app, you will provide a version number to differentiate it from previous versions. On Android it is used as \"versionName\". On Xcode builds it is used as \"CFBundleShortVersionString\". On Windows it is used as the major, minor, and patch parts of the product and file versions." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "shrink" -d "This flag has no effect. Code shrinking is always enabled in release builds. To learn more, see: https://developer.android.com/studio/build/shrink-code" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "no-shrink" -d "This flag has no effect. Code shrinking is always enabled in release builds. To learn more, see: https://developer.android.com/studio/build/shrink-code" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "split-debug-info" -d "In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with \"--analyze-size\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "obfuscate" -d "In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with \"--split-debug-info\" option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace.  Because all identifiers are renamed, methods like Object.runtimeType, Type.toString, Enum.toString, Stacktrace.toString, Symbol.toString (for constant symbols or those generated by runtime system) will return obfuscated results. Any code or tests that rely on exact names will break." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "no-obfuscate" -d "In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with \"--split-debug-info\" option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace.  Because all identifiers are renamed, methods like Object.runtimeType, Type.toString, Enum.toString, Stacktrace.toString, Symbol.toString (for constant symbols or those generated by runtime system) will return obfuscated results. Any code or tests that rely on exact names will break." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "dart-define" -d "Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors. Multiple defines can be passed by repeating \"--dart-define\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "dart-define-from-file" -d "The path of a json format file where flutter define a global constant pool. Json entry will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors; the key and field are json values. Multiple defines can be passed by repeating \"--dart-define-from-file\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "extra-front-end-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart front end. For example, \"--extra-front-end-options=--enable-experiment=nonfunction-type-aliases\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "extra-gen-snapshot-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart native compiler. (Only used in \"--profile\" or \"--release\" builds.) For example, \"--extra-gen-snapshot-options=--no-strip\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "bundle-sksl-path" -d "A path to a file containing precompiled SkSL shaders generated during \"flutter run\". These can be included in an application to improve the first frame render times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "enable-experiment" -d "The name of an experimental Dart feature to enable. For more information see: https://github.com/dart-lang/sdk/blob/main/docs/process/experimental-flags.md" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "performance-measurement-file" -d "The name of a file where flutter assemble performance and cached-ness information will be written in a JSON format." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "analyze-size" -d "Whether to produce additional profile information for artifact output size. This flag is only supported on \"--release\" builds. When building for Android, a single ABI must be specified at a time with the \"--target-platform\" flag. When building for iOS, only the symbols from the arm64 architecture are used to analyze code size. By default, the intermediate output files will be placed in a transient directory in the build directory. This can be overridden with the \"--code-size-directory\" option. This flag cannot be combined with \"--split-debug-info\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "no-analyze-size" -d "Whether to produce additional profile information for artifact output size. This flag is only supported on \"--release\" builds. When building for Android, a single ABI must be specified at a time with the \"--target-platform\" flag. When building for iOS, only the symbols from the arm64 architecture are used to analyze code size. By default, the intermediate output files will be placed in a transient directory in the build directory. This can be overridden with the \"--code-size-directory\" option. This flag cannot be combined with \"--split-debug-info\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "code-size-directory" -d "The location to write code size analysis files. If this is not specified, files are written to a temporary directory under the build directory." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "android-gradle-daemon" -d "Whether to enable the Gradle daemon when performing an Android build. Starting the daemon is the default behavior of the gradle wrapper script created in a Flutter project. Setting this flag to false corresponds to passing \"--no-daemon\" to the gradle wrapper script. This flag will cause the daemon process to terminate after the build is completed. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "no-android-gradle-daemon" -d "Whether to enable the Gradle daemon when performing an Android build. Starting the daemon is the default behavior of the gradle wrapper script created in a Flutter project. Setting this flag to false corresponds to passing \"--no-daemon\" to the gradle wrapper script. This flag will cause the daemon process to terminate after the build is completed. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "android-project-arg" -d "Additional arguments specified as key=value that are passed directly to the gradle project via the -P flag. These can be accessed in build.gradle via the \"project.property\" API." -s P -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "multidex" -d "When enabled, indicates that the app should be built with multidex support. This flag adds the dependencies for multidex when the minimum android sdk is 20 or below. For android sdk versions 21 and above, multidex support is native. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "no-multidex" -d "When enabled, indicates that the app should be built with multidex support. This flag adds the dependencies for multidex when the minimum android sdk is 20 or below. For android sdk versions 21 and above, multidex support is native. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "ignore-deprecation" -d "Indicates that the app should ignore deprecation warnings and continue to build using deprecated APIs. Use of this flag may cause your app to fail to build when deprecated APIs are removed." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "split-per-abi" -d "Whether to split the APKs per ABIs. To learn more, see: https://developer.android.com/studio/build/configure-apk-splits#configure-abi-split" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "config-only" -d "Generate build files used by flutter but do not build any artifacts." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "no-config-only" -d "Generate build files used by flutter but do not build any artifacts." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "target-platform" -d "The target platform for which the app is compiled. [android-arm (default), android-arm64 (default), android-x86, android-x64 (default)]" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk" -xa "(__fish_flutter_target_platforms)"
complete -c flutter -l "track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -l "no-track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from apk"
complete -c flutter -f -n "__fish_seen_subcommand_from build; and not __fish_seen_subcommand_from $build_commands" -a appbundle -d "Build an Android App Bundle file from your app."
complete -c flutter -l "fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "no-fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "tree-shake-icons" -d "Tree shake icon fonts so that only glyphs used by the application remain. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "no-tree-shake-icons" -d "Tree shake icon fonts so that only glyphs used by the application remain. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "target" -d "The main entry-point file of the application, as run on the device. If the \"--target\" option is omitted, but a file name is provided on the command line, then that is used instead. (defaults to \"lib/main.dart\")" -s t -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "debug" -d "Build a debug version of your app." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "profile" -d "Build a version of your app specialized for performance profiling." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "release" -d "Build a release version of your app (default mode)." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "jit-release" -d "Build a JIT release version of your app (default mode)." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "flavor" -d "Build a custom app flavor as defined by platform-specific build setup. Supports the use of product flavors in Android Gradle scripts, and the use of custom Xcode schemes." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "no-pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "build-number" -d "An identifier used as an internal version number. Each build must have a unique identifier to differentiate it from previous builds. It is used to determine whether one build is more recent than another, with higher numbers indicating more recent build. On Android it is used as \"versionCode\". On Xcode builds it is used as \"CFBundleVersion\". On Windows it is used as the build suffix for the product and file versions." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "build-name" -d "A \"x.y.z\" string used as the version number shown to users. For each new version of your app, you will provide a version number to differentiate it from previous versions. On Android it is used as \"versionName\". On Xcode builds it is used as \"CFBundleShortVersionString\". On Windows it is used as the major, minor, and patch parts of the product and file versions." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "shrink" -d "This flag has no effect. Code shrinking is always enabled in release builds. To learn more, see: https://developer.android.com/studio/build/shrink-code" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "no-shrink" -d "This flag has no effect. Code shrinking is always enabled in release builds. To learn more, see: https://developer.android.com/studio/build/shrink-code" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "split-debug-info" -d "In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with \"--analyze-size\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "obfuscate" -d "In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with \"--split-debug-info\" option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace.  Because all identifiers are renamed, methods like Object.runtimeType, Type.toString, Enum.toString, Stacktrace.toString, Symbol.toString (for constant symbols or those generated by runtime system) will return obfuscated results. Any code or tests that rely on exact names will break." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "no-obfuscate" -d "In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with \"--split-debug-info\" option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace.  Because all identifiers are renamed, methods like Object.runtimeType, Type.toString, Enum.toString, Stacktrace.toString, Symbol.toString (for constant symbols or those generated by runtime system) will return obfuscated results. Any code or tests that rely on exact names will break." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "dart-define" -d "Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors. Multiple defines can be passed by repeating \"--dart-define\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "dart-define-from-file" -d "The path of a json format file where flutter define a global constant pool. Json entry will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors; the key and field are json values. Multiple defines can be passed by repeating \"--dart-define-from-file\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "extra-front-end-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart front end. For example, \"--extra-front-end-options=--enable-experiment=nonfunction-type-aliases\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "extra-gen-snapshot-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart native compiler. (Only used in \"--profile\" or \"--release\" builds.) For example, \"--extra-gen-snapshot-options=--no-strip\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "bundle-sksl-path" -d "A path to a file containing precompiled SkSL shaders generated during \"flutter run\". These can be included in an application to improve the first frame render times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "performance-measurement-file" -d "The name of a file where flutter assemble performance and cached-ness information will be written in a JSON format." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "no-track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "enable-experiment" -d "The name of an experimental Dart feature to enable. For more information see: https://github.com/dart-lang/sdk/blob/main/docs/process/experimental-flags.md" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "analyze-size" -d "Whether to produce additional profile information for artifact output size. This flag is only supported on \"--release\" builds. When building for Android, a single ABI must be specified at a time with the \"--target-platform\" flag. When building for iOS, only the symbols from the arm64 architecture are used to analyze code size. By default, the intermediate output files will be placed in a transient directory in the build directory. This can be overridden with the \"--code-size-directory\" option. This flag cannot be combined with \"--split-debug-info\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "no-analyze-size" -d "Whether to produce additional profile information for artifact output size. This flag is only supported on \"--release\" builds. When building for Android, a single ABI must be specified at a time with the \"--target-platform\" flag. When building for iOS, only the symbols from the arm64 architecture are used to analyze code size. By default, the intermediate output files will be placed in a transient directory in the build directory. This can be overridden with the \"--code-size-directory\" option. This flag cannot be combined with \"--split-debug-info\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "code-size-directory" -d "The location to write code size analysis files. If this is not specified, files are written to a temporary directory under the build directory." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "android-gradle-daemon" -d "Whether to enable the Gradle daemon when performing an Android build. Starting the daemon is the default behavior of the gradle wrapper script created in a Flutter project. Setting this flag to false corresponds to passing \"--no-daemon\" to the gradle wrapper script. This flag will cause the daemon process to terminate after the build is completed. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "no-android-gradle-daemon" -d "Whether to enable the Gradle daemon when performing an Android build. Starting the daemon is the default behavior of the gradle wrapper script created in a Flutter project. Setting this flag to false corresponds to passing \"--no-daemon\" to the gradle wrapper script. This flag will cause the daemon process to terminate after the build is completed. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "android-project-arg" -d "Additional arguments specified as key=value that are passed directly to the gradle project via the -P flag. These can be accessed in build.gradle via the \"project.property\" API." -s P -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "multidex" -d "When enabled, indicates that the app should be built with multidex support. This flag adds the dependencies for multidex when the minimum android sdk is 20 or below. For android sdk versions 21 and above, multidex support is native. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "no-multidex" -d "When enabled, indicates that the app should be built with multidex support. This flag adds the dependencies for multidex when the minimum android sdk is 20 or below. For android sdk versions 21 and above, multidex support is native. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "ignore-deprecation" -d "Indicates that the app should ignore deprecation warnings and continue to build using deprecated APIs. Use of this flag may cause your app to fail to build when deprecated APIs are removed." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "target-platform" -d "The target platform for which the app is compiled. [android-arm (default), android-arm64 (default), android-x64 (default)]" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle" -xa "(__fish_flutter_target_platforms)"
complete -c flutter -l "deferred-components" -d "Setting to false disables building with deferred components. All deferred code will be compiled into the base app, and assets act as if they were defined under the regular assets section in pubspec.yaml. This flag has no effect on non-deferred components apps. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "no-deferred-components" -d "Setting to false disables building with deferred components. All deferred code will be compiled into the base app, and assets act as if they were defined under the regular assets section in pubspec.yaml. This flag has no effect on non-deferred components apps. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "validate-deferred-components" -d "When enabled, deferred component apps will fail to build if setup problems are detected that would prevent deferred components from functioning properly. The tooling also provides guidance on how to set up the project files to pass this verification. Disabling setup verification will always attempt to fully build the app regardless of any problems detected. Builds that are part of CI testing and advanced users with custom deferred components implementations should disable setup verification. This flag has no effect on non-deferred components apps. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -l "no-validate-deferred-components" -d "When enabled, deferred component apps will fail to build if setup problems are detected that would prevent deferred components from functioning properly. The tooling also provides guidance on how to set up the project files to pass this verification. Disabling setup verification will always attempt to fully build the app regardless of any problems detected. Builds that are part of CI testing and advanced users with custom deferred components implementations should disable setup verification. This flag has no effect on non-deferred components apps. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from appbundle"
complete -c flutter -f -n "__fish_seen_subcommand_from build; and not __fish_seen_subcommand_from $build_commands" -a bundle -d "Build the Flutter assets directory from your app."
complete -c flutter -l "fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "no-fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "target" -d "The main entry-point file of the application, as run on the device. If the \"--target\" option is omitted, but a file name is provided on the command line, then that is used instead. (defaults to \"lib/main.dart\")" -s t -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "output-dill" -d "Specify the path to frontend server output kernel file." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "filesystem-root" -d "Specify the path that is used as the root of a virtual file system during compilation. The input file name should be specified as a URL using the scheme given in \"--filesystem-scheme\". Requires the \"--output-dill\" option to be explicitly specified." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "filesystem-scheme" -d "Specify the scheme that is used for virtual file system used in compilation. See also the \"--filesystem-root\" option. (defaults to \"org-dartlang-root\")" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "build-number" -d "An identifier used as an internal version number. Each build must have a unique identifier to differentiate it from previous builds. It is used to determine whether one build is more recent than another, with higher numbers indicating more recent build. On Android it is used as \"versionCode\". On Xcode builds it is used as \"CFBundleVersion\". On Windows it is used as the build suffix for the product and file versions." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "debug" -d "Build a debug version of your app (default mode)." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "profile" -d "Build a version of your app specialized for performance profiling." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "release" -d "Build a release version of your app." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "jit-release" -d "Build a JIT release version of your app." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "dart-define" -d "Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors. Multiple defines can be passed by repeating \"--dart-define\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "dart-define-from-file" -d "The path of a json format file where flutter define a global constant pool. Json entry will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors; the key and field are json values. Multiple defines can be passed by repeating \"--dart-define-from-file\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "extra-front-end-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart front end. For example, \"--extra-front-end-options=--enable-experiment=nonfunction-type-aliases\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "extra-gen-snapshot-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart native compiler. (Only used in \"--profile\" or \"--release\" builds.) For example, \"--extra-gen-snapshot-options=--no-strip\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "depfile" -d "A file path where a depfile will be written. This contains all build inputs and outputs in a Make-style syntax. (defaults to \"build/snapshot_blob.bin.d\")" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "target-platform" -d "The architecture for which to build the application. [android-arm (default), android-arm64, android-x86, android-x64, ios, darwin, linux-x64, linux-arm64, windows-x64]" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle" -xa "(__fish_flutter_target_platforms)"
complete -c flutter -l "asset-dir" -d "The output directory for the kernel_blob.bin file, the native snapshot, the assets, etc. Can be used to redirect the output when driving the Flutter toolchain from another build system. (defaults to \"build/flutter_assets\")" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "tree-shake-icons" -d "(deprecated) Icon font tree shaking is not supported by this command." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "no-tree-shake-icons" -d "(deprecated) Icon font tree shaking is not supported by this command." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "no-pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -l "no-track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from bundle"
complete -c flutter -f -n "__fish_seen_subcommand_from build; and not __fish_seen_subcommand_from $build_commands" -a linux -d "Build a Linux desktop application."
complete -c flutter -l "fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "no-fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "debug" -d "Build a debug version of your app." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "profile" -d "Build a version of your app specialized for performance profiling." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "release" -d "Build a release version of your app (default mode)." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "jit-release" -d "Build a JIT release version of your app (default mode)." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "performance-measurement-file" -d "The name of a file where flutter assemble performance and cached-ness information will be written in a JSON format." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "bundle-sksl-path" -d "A path to a file containing precompiled SkSL shaders generated during \"flutter run\". These can be included in an application to improve the first frame render times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "obfuscate" -d "In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with \"--split-debug-info\" option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace.  Because all identifiers are renamed, methods like Object.runtimeType, Type.toString, Enum.toString, Stacktrace.toString, Symbol.toString (for constant symbols or those generated by runtime system) will return obfuscated results. Any code or tests that rely on exact names will break." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "no-obfuscate" -d "In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with \"--split-debug-info\" option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace.  Because all identifiers are renamed, methods like Object.runtimeType, Type.toString, Enum.toString, Stacktrace.toString, Symbol.toString (for constant symbols or those generated by runtime system) will return obfuscated results. Any code or tests that rely on exact names will break." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "enable-experiment" -d "The name of an experimental Dart feature to enable. For more information see: https://github.com/dart-lang/sdk/blob/main/docs/process/experimental-flags.md" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "split-debug-info" -d "In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the \"flutter symbolize\" command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with \"--analyze-size\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "tree-shake-icons" -d "Tree shake icon fonts so that only glyphs used by the application remain. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "no-tree-shake-icons" -d "Tree shake icon fonts so that only glyphs used by the application remain. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "analyze-size" -d "Whether to produce additional profile information for artifact output size. This flag is only supported on \"--release\" builds. When building for Android, a single ABI must be specified at a time with the \"--target-platform\" flag. When building for iOS, only the symbols from the arm64 architecture are used to analyze code size. By default, the intermediate output files will be placed in a transient directory in the build directory. This can be overridden with the \"--code-size-directory\" option. This flag cannot be combined with \"--split-debug-info\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "no-analyze-size" -d "Whether to produce additional profile information for artifact output size. This flag is only supported on \"--release\" builds. When building for Android, a single ABI must be specified at a time with the \"--target-platform\" flag. When building for iOS, only the symbols from the arm64 architecture are used to analyze code size. By default, the intermediate output files will be placed in a transient directory in the build directory. This can be overridden with the \"--code-size-directory\" option. This flag cannot be combined with \"--split-debug-info\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "code-size-directory" -d "The location to write code size analysis files. If this is not specified, files are written to a temporary directory under the build directory." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "dart-define" -d "Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors. Multiple defines can be passed by repeating \"--dart-define\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "dart-define-from-file" -d "The path of a json format file where flutter define a global constant pool. Json entry will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors; the key and field are json values. Multiple defines can be passed by repeating \"--dart-define-from-file\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "extra-front-end-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart front end. For example, \"--extra-front-end-options=--enable-experiment=nonfunction-type-aliases\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "extra-gen-snapshot-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart native compiler. (Only used in \"--profile\" or \"--release\" builds.) For example, \"--extra-gen-snapshot-options=--no-strip\"." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "no-pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "target" -d "The main entry-point file of the application, as run on the device. If the \"--target\" option is omitted, but a file name is provided on the command line, then that is used instead. (defaults to \"lib/main.dart\")" -s t -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "no-track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "build-number" -d "An identifier used as an internal version number. Each build must have a unique identifier to differentiate it from previous builds. It is used to determine whether one build is more recent than another, with higher numbers indicating more recent build. On Android it is used as \"versionCode\". On Xcode builds it is used as \"CFBundleVersion\". On Windows it is used as the build suffix for the product and file versions." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "build-name" -d "A \"x.y.z\" string used as the version number shown to users. For each new version of your app, you will provide a version number to differentiate it from previous versions. On Android it is used as \"versionName\". On Xcode builds it is used as \"CFBundleShortVersionString\". On Windows it is used as the major, minor, and patch parts of the product and file versions." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -l "target-platform" -d "The target platform for which the app is compiled. [linux-arm64, linux-x64 (default)]" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux" -xa "(__fish_flutter_target_platforms)"
complete -c flutter -l "target-sysroot" -d "The root filesystem path of target platform for which the app is compiled. This option is valid only if the current host and target architectures are different. (defaults to \"/\")" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from linux"
complete -c flutter -f -n "__fish_seen_subcommand_from build; and not __fish_seen_subcommand_from $build_commands" -a web -d "Build a web application bundle."
complete -c flutter -l "fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "no-fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "tree-shake-icons" -d "Tree shake icon fonts so that only glyphs used by the application remain. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "no-tree-shake-icons" -d "Tree shake icon fonts so that only glyphs used by the application remain. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "target" -d "The main entry-point file of the application, as run on the device. If the \"--target\" option is omitted, but a file name is provided on the command line, then that is used instead. (defaults to \"lib/main.dart\")" -s t -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "output" -d "The absolute path to the directory where the repository is generated. By default, this is <current-directory>/build/<target-platform>. Currently supported for subcommands: aar, web." -s o -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "no-pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "build-number" -d "An identifier used as an internal version number. Each build must have a unique identifier to differentiate it from previous builds. It is used to determine whether one build is more recent than another, with higher numbers indicating more recent build. On Android it is used as \"versionCode\". On Xcode builds it is used as \"CFBundleVersion\". On Windows it is used as the build suffix for the product and file versions." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "build-name" -d "A \"x.y.z\" string used as the version number shown to users. For each new version of your app, you will provide a version number to differentiate it from previous versions. On Android it is used as \"versionName\". On Xcode builds it is used as \"CFBundleShortVersionString\". On Windows it is used as the major, minor, and patch parts of the product and file versions." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "profile" -d "Build a version of your app specialized for performance profiling." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "release" -d "Build a release version of your app (default mode)." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "jit-release" -d "Build a JIT release version of your app (default mode)." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "dart-define" -d "Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors. Multiple defines can be passed by repeating \"--dart-define\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "dart-define-from-file" -d "The path of a json format file where flutter define a global constant pool. Json entry will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors; the key and field are json values. Multiple defines can be passed by repeating \"--dart-define-from-file\" multiple times." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "enable-experiment" -d "The name of an experimental Dart feature to enable. For more information see: https://github.com/dart-lang/sdk/blob/main/docs/process/experimental-flags.md" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "native-null-assertions" -d "Enables additional runtime null checks in web applications to ensure the correct nullability of native (such as in dart:html) and external (such as with JS interop) types. This is enabled by default but only takes effect in sound mode. To report an issue with a null assertion failure in dart:html or the other dart web libraries, please file a bug at: https://github.com/dart-lang/sdk/issues/labels/web-libraries (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "no-native-null-assertions" -d "Enables additional runtime null checks in web applications to ensure the correct nullability of native (such as in dart:html) and external (such as with JS interop) types. This is enabled by default but only takes effect in sound mode. To report an issue with a null assertion failure in dart:html or the other dart web libraries, please file a bug at: https://github.com/dart-lang/sdk/issues/labels/web-libraries (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "base-href" -d "Overrides the href attribute of the <base> tag in web/index.html. No change is done to web/index.html file if this flag is not provided. The value has to start and end with a slash \"/\". For more information: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "pwa-strategy" -d "The caching strategy to be used by the PWA service worker. [none]                                        Generate a service worker with no body. This is useful for local testing or in cases where the service worker caching functionality is not desirable [offline-first] (default)                     Attempt to cache the application shell eagerly and then lazily cache all subsequent assets as they are loaded. When making a network request for an asset, the offline cache will be preferred." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "web-renderer" -d "The renderer implementation to use when building for the web. [auto] (default)                              Use the HTML renderer on mobile devices, and CanvasKit on desktop devices. [canvaskit]                                   Always use the CanvasKit renderer. This renderer uses WebGL and WebAssembly to render graphics. [html]                                        Always use the HTML renderer. This renderer uses a combination of HTML, CSS, SVG, 2D Canvas, and WebGL." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "web-resources-cdn" -d "Use Web static resources hosted on a CDN. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "no-web-resources-cdn" -d "Use Web static resources hosted on a CDN. (defaults to on)" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "csp" -d "Disable dynamic generation of code in the generated output. This is necessary to satisfy CSP restrictions (see http://www.w3.org/TR/CSP/)." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "source-maps" -d "Generate a sourcemap file. These can be used by browsers to view and debug the original source code of a compiled and minified Dart application." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "no-source-maps" -d "Generate a sourcemap file. These can be used by browsers to view and debug the original source code of a compiled and minified Dart application." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "dart2js-optimization" -d "Sets the optimization level used for Dart compilation to JavaScript. Valid values range from O0 to O4. (defaults to \"O4\")" -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "dump-info" -d "Passes \"--dump-info\" to the Javascript compiler which generates information about the generated code is a .js.info.json file." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -l "no-frequency-based-minification" -d "Disables the frequency based minifier. Useful for comparing the output between builds." -n "__fish_seen_subcommand_from build;__fish_seen_subcommand_from web"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a clean -d "Delete the build/ and .dart_tool/ directories."
complete -c flutter -l "scheme" -d "When cleaning Xcode schemes, clean only the specified scheme." -n "__fish_seen_subcommand_from clean"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a create -d "Create a new Flutter project."
complete -c flutter -l "pub" -d "Whether to run \"flutter pub get\" after the project has been created. (defaults to on)" -n "__fish_seen_subcommand_from create"
complete -c flutter -l "no-pub" -d "Whether to run \"flutter pub get\" after the project has been created. (defaults to on)" -n "__fish_seen_subcommand_from create"
complete -c flutter -l "offline" -d "When \"flutter pub get\" is run by the create command, this indicates whether to run it in offline mode or not. In offline mode, it will need to have all dependencies already available in the pub cache to succeed." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "no-offline" -d "When \"flutter pub get\" is run by the create command, this indicates whether to run it in offline mode or not. In offline mode, it will need to have all dependencies already available in the pub cache to succeed." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "with-driver-test" -d "(deprecated) Historically, this added a flutter_driver dependency and generated a sample \"flutter drive\" test. Now it does nothing. Consider using the \"integration_test\" package: https://pub.dev/packages/integration_test" -n "__fish_seen_subcommand_from create"
complete -c flutter -l "no-with-driver-test" -d "(deprecated) Historically, this added a flutter_driver dependency and generated a sample \"flutter drive\" test. Now it does nothing. Consider using the \"integration_test\" package: https://pub.dev/packages/integration_test" -n "__fish_seen_subcommand_from create"
complete -c flutter -l "overwrite" -d "When performing operations, overwrite existing files." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "no-overwrite" -d "When performing operations, overwrite existing files." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "description" -d "The description to use for your new Flutter project. This string ends up in the pubspec.yaml file. (defaults to \"A new Flutter project.\")" -n "__fish_seen_subcommand_from create"
complete -c flutter -l "org" -d "The organization responsible for your new Flutter project, in reverse domain name notation. This string is used in Java package names and as prefix in the iOS bundle identifier. (defaults to \"com.example\")" -n "__fish_seen_subcommand_from create"
complete -c flutter -l "project-name" -d "The project name for this new Flutter project. This must be a valid dart package name." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "ios-language" -d "The language to use for iOS-specific code, either Objective-C (legacy) or Swift (recommended). [objc, swift (default)]" -s i -n "__fish_seen_subcommand_from create"
complete -c flutter -l "android-language" -d "The language to use for Android-specific code, either Java (legacy) or Kotlin (recommended). [java, kotlin (default)]" -s a -n "__fish_seen_subcommand_from create"
complete -c flutter -l "skip-name-checks" -d "Allow the creation of applications and plugins with invalid names. This is only intended to enable testing of the tool itself." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "no-skip-name-checks" -d "Allow the creation of applications and plugins with invalid names. This is only intended to enable testing of the tool itself." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "implementation-tests" -d "Include implementation tests that verify the template functions correctly. This is only intended to enable testing of the tool itself." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "no-implementation-tests" -d "Include implementation tests that verify the template functions correctly. This is only intended to enable testing of the tool itself." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "initial-create-revision" -d "The Flutter SDK git commit hash to store in .migrate_config. This parameter is used by the tool internally and should generally not be used manually." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "platforms" -d "The platforms supported by this project. Platform folders (e.g. android/) will be generated in the target project. This argument only works when \"--template\" is set to app or plugin. When adding platforms to a plugin project, the pubspec.yaml will be updated with the requested platform. Adding desktop platforms requires the corresponding desktop config setting to be enabled. [ios (default), android (default), windows (default), linux (default), macos (default), web (default)]" -n "__fish_seen_subcommand_from create"
complete -c flutter -l "template" -d "Specify the type of project to create. [app]                    (default) Generate a Flutter application. [module]                 Generate a project to add a Flutter module to an existing Android or iOS application. [package]                Generate a shareable Flutter project containing modular Dart code. [plugin]                 Generate a shareable Flutter project containing an API in Dart code with a platform-specific implementation through method channels for Android, iOS, Linux, macOS, Windows, web, or any combination of these. [plugin_ffi]             Generate a shareable Flutter project containing an API in Dart code with a platform-specific implementation through dart:ffi for Android, iOS, Linux, macOS, Windows, or any combination of these. [skeleton]               Generate a List View / Detail View Flutter application that follows community best practices." -s t -n "__fish_seen_subcommand_from create"
complete -c flutter -l "sample" -d "Specifies the Flutter code sample to use as the \"main.dart\" for an application. Implies \"--template=app\". The value should be the sample ID of the desired sample from the API documentation website (https://api.flutter.dev/). An example can be found at: https://api.flutter.dev/flutter/widgets/SingleChildScrollView-class.html" -s s -n "__fish_seen_subcommand_from create"
complete -c flutter -l "empty" -d "Specifies creating using an application template with a main.dart that is minimal, including no comments, as a starting point for a new application. Implies \"--template=app\"." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "no-empty" -d "Specifies creating using an application template with a main.dart that is minimal, including no comments, as a starting point for a new application. Implies \"--template=app\"." -n "__fish_seen_subcommand_from create"
complete -c flutter -l "list-samples" -d "Specifies a JSON output file for a listing of Flutter code samples that can be created with \"--sample\"." -n "__fish_seen_subcommand_from create"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a drive -d "Run integration tests for the project on an attached device or emulator."
complete -c flutter -l "debug" -d "Build a debug version of your app (default mode)." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "profile" -d "Build a version of your app specialized for performance profiling." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "release" -d "Build a release version of your app." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "jit-release" -d "Build a JIT release version of your app." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "dart-define" -d "Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors. Multiple defines can be passed by repeating \"--dart-define\" multiple times." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "dart-define-from-file" -d "The path of a json format file where flutter define a global constant pool. Json entry will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors; the key and field are json values. Multiple defines can be passed by repeating \"--dart-define-from-file\" multiple times." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "flavor" -d "Build a custom app flavor as defined by platform-specific build setup. Supports the use of product flavors in Android Gradle scripts, and the use of custom Xcode schemes." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-renderer" -d "The renderer implementation to use when building for the web. [auto] (default)                              Use the HTML renderer on mobile devices, and CanvasKit on desktop devices. [canvaskit]                                   Always use the CanvasKit renderer. This renderer uses WebGL and WebAssembly to render graphics. [html]                                        Always use the HTML renderer. This renderer uses a combination of HTML, CSS, SVG, 2D Canvas, and WebGL." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-resources-cdn" -d "Use Web static resources hosted on a CDN. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-web-resources-cdn" -d "Use Web static resources hosted on a CDN. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "native-null-assertions" -d "Enables additional runtime null checks in web applications to ensure the correct nullability of native (such as in dart:html) and external (such as with JS interop) types. This is enabled by default but only takes effect in sound mode. To report an issue with a null assertion failure in dart:html or the other dart web libraries, please file a bug at: https://github.com/dart-lang/sdk/issues/labels/web-libraries (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-native-null-assertions" -d "Enables additional runtime null checks in web applications to ensure the correct nullability of native (such as in dart:html) and external (such as with JS interop) types. This is enabled by default but only takes effect in sound mode. To report an issue with a null assertion failure in dart:html or the other dart web libraries, please file a bug at: https://github.com/dart-lang/sdk/issues/labels/web-libraries (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "bundle-sksl-path" -d "A path to a file containing precompiled SkSL shaders generated during \"flutter run\". These can be included in an application to improve the first frame render times." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "use-application-binary" -d "Specify a pre-built application binary to use when running. For Android applications, this must be the path to an APK. For iOS applications, the path to an IPA. Other device types do not yet support prebuilt application binaries." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "trace-startup" -d "Trace application startup, then exit, saving the trace to a file. By default, this will be saved in the \"build\" directory. If the FLUTTER_TEST_OUTPUTS_DIR environment variable is set, the file will be written there instead." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "cache-startup-profile" -d "Caches the CPU profile collected before the first frame for startup analysis." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-cache-startup-profile" -d "Caches the CPU profile collected before the first frame for startup analysis." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "verbose-system-logs" -d "Include verbose logging from the Flutter engine." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "cache-sksl" -d "Cache the shader in the SkSL format instead of in binary or GLSL formats." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "dump-skp-on-shader-compilation" -d "Automatically dump the skp that triggers new shader compilations. This is useful for writing custom ShaderWarmUp to reduce jank. By default, this is not enabled as it introduces significant overhead. This is only available in profile or debug builds." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "purge-persistent-cache" -d "Removes all existing persistent caches. This allows reproducing shader compilation jank that normally only happens the first time an app is run, or for reliable testing of compilation jank fixes (e.g. shader warm-up)." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "route" -d "Which route to load when running the app." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "vmservice-out-file" -d "A file to write the attached vmservice URL to after an application is started." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "disable-service-auth-codes" -d "(deprecated) Allow connections to the VM service without using authentication codes. (Not recommended! This can open your device to remote code execution attacks!)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "start-paused" -d "Start in a paused mode and wait for a debugger to connect. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-start-paused" -d "Start in a paused mode and wait for a debugger to connect. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "dart-flags" -d "Pass a list of comma separated flags to the Dart instance at application startup. Flags passed through this option must be present on the allowlist defined within the Flutter engine. If a disallowed flag is encountered, the process will be terminated immediately.  This flag is not available on the stable channel and is only applied in debug and profile modes. This option should only be used for experiments and should not be used by typical users." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "endless-trace-buffer" -d "Enable tracing to an infinite buffer, instead of a ring buffer. This is useful when recording large traces. To use an endless buffer to record startup traces, combine this with \"--trace-startup\"." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "trace-systrace" -d "Enable tracing to the system tracer. This is only useful on platforms where such a tracer is available (Android, iOS, macOS and Fuchsia)." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "trace-skia" -d "Enable tracing of Skia code. This is useful when debugging the raster thread (formerly known as the GPU thread). By default, Flutter will not log Skia code, as it introduces significant overhead that may affect recorded performance metrics in a misleading way." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "trace-allowlist" -d "Filters out all trace events except those that are specified in this comma separated list of allowed prefixes." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "trace-skia-allowlist" -d "Filters out all Skia trace events except those that are specified in this comma separated list of allowed prefixes." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "enable-dart-profiling" -d "Whether the Dart VM sampling CPU profiler is enabled. This flag is only meaningful in debug and profile builds. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-enable-dart-profiling" -d "Whether the Dart VM sampling CPU profiler is enabled. This flag is only meaningful in debug and profile builds. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "enable-software-rendering" -d "Enable rendering using the Skia software backend. This is useful when testing Flutter on emulators. By default, Flutter will attempt to either use OpenGL or Vulkan and fall back to software when neither is available." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "skia-deterministic-rendering" -d "When combined with \"--enable-software-rendering\", this should provide completely deterministic (i.e. reproducible) Skia rendering. This is useful for testing purposes (e.g. when comparing screenshots)." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "dart-entrypoint-args" -d "Pass a list of arguments to the Dart entrypoint at application startup. By default this is main(List<String> args). Specify this option multiple times each with one argument to pass multiple arguments to the Dart entrypoint. Currently this is only supported on desktop platforms." -s a -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "uninstall-first" -d "Uninstall previous versions of the app on the device before reinstalling. Currently only supported on iOS." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-uninstall-first" -d "Uninstall previous versions of the app on the device before reinstalling. Currently only supported on iOS." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-hostname" -d "The hostname that the web sever will use to resolve an IP to serve from. The unresolved hostname is used to launch Chrome when using the chrome Device. The name \"any\" may also be used to serve on any IPV4 for either the Chrome or web-server device. (defaults to \"localhost\")" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-port" -d "The host port to serve the web application from. If not provided, the tool will select a random open port on the host." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-server-debug-protocol" -d "The protocol (SSE or WebSockets) to use for the debug service proxy when using the Web Server device and Dart Debug extension. This is useful for editors/debug adapters that do not support debugging over SSE (the default protocol for Web Server/Dart Debugger extension). [sse, ws (default)]" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-server-debug-backend-protocol" -d "The protocol (SSE or WebSockets) to use for the Dart Debug Extension backend service when using the Web Server device. Using WebSockets can improve performance but may fail when connecting through some proxy servers. [sse, ws (default)]" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-server-debug-injected-client-protocol" -d "The protocol (SSE or WebSockets) to use for the injected client when using the Web Server device. Using WebSockets can improve performance but may fail when connecting through some proxy servers. [sse, ws (default)]" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-allow-expose-url" -d "Enables daemon-to-editor requests (app.exposeUrl) for exposing URLs when running on remote machines." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-web-allow-expose-url" -d "Enables daemon-to-editor requests (app.exposeUrl) for exposing URLs when running on remote machines." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-run-headless" -d "Launches the browser in headless mode. Currently only Chrome supports this option." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-web-run-headless" -d "Launches the browser in headless mode. Currently only Chrome supports this option." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-browser-debug-port" -d "The debug port the browser should use. If not specified, a random port is selected. Currently only Chrome supports this option. It serves the Chrome DevTools Protocol (https://chromedevtools.github.io/devtools-protocol/)." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-enable-expression-evaluation" -d "Enables expression evaluation in the debugger. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-web-enable-expression-evaluation" -d "Enables expression evaluation in the debugger. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-launch-url" -d "The URL to provide to the browser. Defaults to an HTTP URL with the host name of \"--web-hostname\", the port of \"--web-port\", and the path set to \"/\"." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "web-browser-flag" -d "Additional flag to pass to a browser instance at startup. Chrome: https://www.chromium.org/developers/how-tos/run-chromium-with-flags/ Firefox: https://wiki.mozilla.org/Firefox/CommandLineOptions Multiple flags can be passed by repeating \"--web-browser-flag\" multiple times." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "target" -d "The main entry-point file of the application, as run on the device. If the \"--target\" option is omitted, but a file name is provided on the command line, then that is used instead. (defaults to \"lib/main.dart\")" -s t -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "vm-service-port" -d "(deprecated; use host-vmservice-port instead) Listen to the given port for a Dart VM Service connection. Specifying port 0 (the default) will find a random free port. if the Dart Development Service (DDS) is enabled, this will not be the port of the VmService instance advertised on the command line." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "observatory-port" -d "(deprecated; use host-vmservice-port instead) Listen to the given port for a Dart VM Service connection. Specifying port 0 (the default) will find a random free port. if the Dart Development Service (DDS) is enabled, this will not be the port of the VmService instance advertised on the command line." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "device-vmservice-port" -d "Look for vmservice connections only from the specified port. Specifying port 0 (the default) will accept the first vmservice discovered." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "host-vmservice-port" -d "When a device-side vmservice port is forwarded to a host-side port, use this value as the host port. Specifying port 0 (the default) will find a random free host port." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "ipv6" -d "Binds to IPv6 localhost instead of IPv4 when the flutter tool forwards the host port to a device port." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "device-user" -d "Identifier number for a user or work profile on Android only. Run \"adb shell pm list users\" for available identifiers." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "device-timeout" -d "Time in seconds to wait for devices to attach. Longer timeouts may be necessary for networked devices." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "device-connection" -d "Discover devices based on connection type. [attached]                                    Only searches for devices connected by USB or built-in (such as simulators/emulators, MacOS/Windows, Chrome) [both] (default)                              Searches for both attached and wireless devices. [wireless]                                    Only searches for devices connected wirelessly. Discovering wireless devices may take longer." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "dds-port" -d "When this value is provided, the Dart Development Service (DDS) will be bound to the provided port. Specifying port 0 (the default) will find a random free port." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "dds" -d "Enable the Dart Developer Service (DDS). It may be necessary to disable this when attaching to an application with an existing DDS instance (e.g., attaching to an application currently connected to by \"flutter run\"), or when running certain tests. Disabling this feature may degrade IDE functionality if a DDS instance is not already connected to the target application. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-dds" -d "Enable the Dart Developer Service (DDS). It may be necessary to disable this when attaching to an application with an existing DDS instance (e.g., attaching to an application currently connected to by \"flutter run\"), or when running certain tests. Disabling this feature may degrade IDE functionality if a DDS instance is not already connected to the target application. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "disable-dds" -d "(deprecated; use \"--no-dds\" instead) Disable the Dart Developer Service (DDS)." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-disable-dds" -d "(deprecated; use \"--no-dds\" instead) Disable the Dart Developer Service (DDS)." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "devtools" -d "Enable (or disable, with \"--no-devtools\") the launching of the Flutter DevTools debugger and profiler. If specified, \"--devtools-server-address\" is ignored. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-devtools" -d "Enable (or disable, with \"--no-devtools\") the launching of the Flutter DevTools debugger and profiler. If specified, \"--devtools-server-address\" is ignored. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "devtools-server-address" -d "When this value is provided, the Flutter tool will not spin up a new DevTools server instance, and will instead use the one provided at the given address. Ignored if \"--no-devtools\" is specified." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "serve-observatory" -d "Serve the legacy Observatory developer tooling through the VM service." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-serve-observatory" -d "Serve the legacy Observatory developer tooling through the VM service." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "android-gradle-daemon" -d "Whether to enable the Gradle daemon when performing an Android build. Starting the daemon is the default behavior of the gradle wrapper script created in a Flutter project. Setting this flag to false corresponds to passing \"--no-daemon\" to the gradle wrapper script. This flag will cause the daemon process to terminate after the build is completed. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-android-gradle-daemon" -d "Whether to enable the Gradle daemon when performing an Android build. Starting the daemon is the default behavior of the gradle wrapper script created in a Flutter project. Setting this flag to false corresponds to passing \"--no-daemon\" to the gradle wrapper script. This flag will cause the daemon process to terminate after the build is completed. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "android-project-arg" -d "Additional arguments specified as key=value that are passed directly to the gradle project via the -P flag. These can be accessed in build.gradle via the \"project.property\" API." -s P -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "enable-impeller" -d "Whether to enable the Impeller rendering engine. Impeller is the default renderer on iOS. On Android, Impeller is available but not the default. This flag will cause Impeller to be used on Android. On other platforms, this flag will be ignored." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-enable-impeller" -d "Whether to enable the Impeller rendering engine. Impeller is the default renderer on iOS. On Android, Impeller is available but not the default. This flag will cause Impeller to be used on Android. On other platforms, this flag will be ignored." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "enable-vulkan-validation" -d "Enable vulkan validation on the Impeller rendering backend if Vulkan is in use and the validation layers are available to the application." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-enable-vulkan-validation" -d "Enable vulkan validation on the Impeller rendering backend if Vulkan is in use and the validation layers are available to the application." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "impeller-force-gl" -d "On platforms that support OpenGL Rendering using Impeller, force rendering using OpenGL over other APIs. If Impeller is not enabled or the platform does not support OpenGL ES, this flag does nothing." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-impeller-force-gl" -d "On platforms that support OpenGL Rendering using Impeller, force rendering using OpenGL over other APIs. If Impeller is not enabled or the platform does not support OpenGL ES, this flag does nothing." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "enable-embedder-api" -d "Whether to enable the experimental embedder API on iOS." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-enable-embedder-api" -d "Whether to enable the experimental embedder API on iOS." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "enable-experiment" -d "The name of an experimental Dart feature to enable. For more information see: https://github.com/dart-lang/sdk/blob/main/docs/process/experimental-flags.md" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "publish-port" -d "Publish the VM service port over mDNS. Disable to prevent the local network permission app dialog in debug and profile build modes (iOS devices only)." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-publish-port" -d "Publish the VM service port over mDNS. Disable to prevent the local network permission app dialog in debug and profile build modes (iOS devices only)." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "multidex" -d "When enabled, indicates that the app should be built with multidex support. This flag adds the dependencies for multidex when the minimum android sdk is 20 or below. For android sdk versions 21 and above, multidex support is native. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-multidex" -d "When enabled, indicates that the app should be built with multidex support. This flag adds the dependencies for multidex when the minimum android sdk is 20 or below. For android sdk versions 21 and above, multidex support is native. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "keep-app-running" -d "Will keep the Flutter application running when done testing. By default, \"flutter drive\" stops the application after tests are finished, and \"--keep-app-running\" overrides this. On the other hand, if \"--use-existing-app\" is specified, then \"flutter drive\" instead defaults to leaving the application running, and \"--no-keep-app-running\" overrides it." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-keep-app-running" -d "Will keep the Flutter application running when done testing. By default, \"flutter drive\" stops the application after tests are finished, and \"--keep-app-running\" overrides this. On the other hand, if \"--use-existing-app\" is specified, then \"flutter drive\" instead defaults to leaving the application running, and \"--no-keep-app-running\" overrides it." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "use-existing-app" -d "Connect to an already running instance via the given Dart VM Service URL. If this option is given, the application will not be automatically started, and it will only be stopped if \"--no-keep-app-running\" is explicitly set." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "driver" -d "The test file to run on the host (as opposed to the target file to run on the device). By default, this file has the same base name as the target file, but in the \"test_driver/\" directory instead, and with \"_test\" inserted just before the extension, so e.g. if the target is \"lib/main.dart\", the driver will be \"test_driver/main_test.dart\"." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "build" -d "(deprecated) Build the app before running. To use an existing app, pass the \"--use-application-binary\" flag with an existing APK. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-build" -d "(deprecated) Build the app before running. To use an existing app, pass the \"--use-application-binary\" flag with an existing APK. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "screenshot" -d "Directory location to write screenshots on test failure." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "driver-port" -d "The port where Webdriver server is launched at. (defaults to \"4444\")" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "headless" -d "Whether the driver browser is going to be launched in headless mode. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-headless" -d "Whether the driver browser is going to be launched in headless mode. (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "browser-name" -d "Name of the browser where tests will be executed. [android-chrome]                              Chrome on Android (see also \"--android-emulator\"). [chrome] (default)                            Google Chrome on this computer (see also \"--chrome-binary\"). [edge]                                        Microsoft Edge on this computer (Windows only). [firefox]                                     Mozilla Firefox on this computer. [ios-safari]                                  Apple Safari on an iOS device. [safari]                                      Apple Safari on this computer (macOS only)." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "browser-dimension" -d "The dimension of the browser when running a Flutter Web test. This will affect screenshot and all offset-related actions. (defaults to \"1600,1024\")" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "android-emulator" -d "Whether to perform Flutter Driver testing using an Android Emulator. Works only if \"browser-name\" is set to \"android-chrome\". (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "no-android-emulator" -d "Whether to perform Flutter Driver testing using an Android Emulator. Works only if \"browser-name\" is set to \"android-chrome\". (defaults to on)" -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "chrome-binary" -d "Location of the Chrome binary. Works only if \"browser-name\" is set to \"chrome\"." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "write-sksl-on-exit" -d "Attempts to write an SkSL file when the drive process is finished to the provided file, overwriting it if necessary." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "test-arguments" -d "Additional arguments to pass to the Dart VM running The test script." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "profile-memory" -d "Launch devtools and profile application memory, writing The output data to the file path provided to this argument as JSON." -n "__fish_seen_subcommand_from drive"
complete -c flutter -l "timeout" -d "Timeout the test after the given number of seconds. If the \"--screenshot\" option is provided, a screenshot will be taken before exiting. Defaults to no timeout." -n "__fish_seen_subcommand_from drive"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a gen-l10n -d "Generate localizations for the current project."
complete -c flutter -l "arb-dir" -d "The directory where the template and translated arb files are located. (defaults to \"lib/l10n\")" -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "output-dir" -d "The directory where the generated localization classes will be written if the synthetic-package flag is set to false.  If output-dir is specified and the synthetic-package flag is enabled, this option will be ignored by the tool.  The app must import the file specified in the \"--output-localization-file\" option from this directory. If unspecified, this defaults to the same directory as the input directory specified in \"--arb-dir\"." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "template-arb-file" -d "The template arb file that will be used as the basis for generating the Dart localization and messages files. (defaults to \"app_en.arb\")" -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "output-localization-file" -d "The filename for the output localization and localizations delegate classes. (defaults to \"app_localizations.dart\")  \"locale\": [\"message_1\", \"message_2\" ... \"message_n\"]  If this option is not specified, a summary of the messages that have not been translated will be printed on the command line." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "output-class" -d "The Dart class name to use for the output localization and localizations delegate classes. (defaults to \"AppLocalizations\")" -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "preferred-supported-locales" -d "The list of preferred supported locales for the application. By default, the tool will generate the supported locales list in alphabetical order. Use this flag if you would like to default to a different locale. For example, pass in \"en_US\" if you would like your app to default to American English on devices that support it. Pass this option multiple times to define multiple items." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "header" -d "The header to prepend to the generated Dart localizations files. This option takes in a string.  For example, pass in \"/// All localized files.\" if you would like this string prepended to the generated Dart file.  Alternatively, see the \"--header-file\" option to pass in a text file for longer headers." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "header-file" -d "The header to prepend to the generated Dart localizations files. The value of this option is the name of the file that contains the header text which will be inserted at the top of each generated Dart file.  Alternatively, see the \"--header\" option to pass in a string for a simpler header.  This file should be placed in the directory specified in \"--arb-dir\"." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "use-deferred-loading" -d "Whether to generate the Dart localization file with locales imported as deferred, allowing for lazy loading of each locale in Flutter web.  This can reduce a web app’s initial startup time by decreasing the size of the JavaScript bundle. When this flag is set to true, the messages for a particular locale are only downloaded and loaded by the Flutter app as they are needed. For projects with a lot of different locales and many localization strings, it can be an performance improvement to have deferred loading. For projects with a small number of locales, the difference is negligible, and might slow down the start up compared to bundling the localizations with the rest of the application.  This flag does not affect other platforms such as mobile or desktop." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "no-use-deferred-loading" -d "Whether to generate the Dart localization file with locales imported as deferred, allowing for lazy loading of each locale in Flutter web.  This can reduce a web app’s initial startup time by decreasing the size of the JavaScript bundle. When this flag is set to true, the messages for a particular locale are only downloaded and loaded by the Flutter app as they are needed. For projects with a lot of different locales and many localization strings, it can be an performance improvement to have deferred loading. For projects with a small number of locales, the difference is negligible, and might slow down the start up compared to bundling the localizations with the rest of the application.  This flag does not affect other platforms such as mobile or desktop." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "gen-inputs-and-outputs-list" -d "When specified, the tool generates a JSON file containing the tool's inputs and outputs named gen_l10n_inputs_and_outputs.json.  This can be useful for keeping track of which files of the Flutter project were used when generating the latest set of localizations. For example, the Flutter tool's build system uses this file to keep track of when to call gen_l10n during hot reload.  The value of this option is the directory where the JSON file will be generated.  When null, the JSON file will not be generated." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "synthetic-package" -d "Determines whether or not the generated output files will be generated as a synthetic package or at a specified directory in the Flutter project.  This flag is set to true by default.  When synthetic-package is set to false, it will generate the localizations files in the directory specified by arb-dir by default.  If output-dir is specified, files will be generated there. (defaults to on)" -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "no-synthetic-package" -d "Determines whether or not the generated output files will be generated as a synthetic package or at a specified directory in the Flutter project.  This flag is set to true by default.  When synthetic-package is set to false, it will generate the localizations files in the directory specified by arb-dir by default.  If output-dir is specified, files will be generated there. (defaults to on)" -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "project-dir" -d "When specified, the tool uses the path passed into this option as the directory of the root Flutter project.  When null, the relative path to the present working directory will be used." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "required-resource-attributes" -d "Requires all resource ids to contain a corresponding resource attribute.  By default, simple messages will not require metadata, but it is highly recommended as this provides context for the meaning of a message to readers.  Resource attributes are still required for plural messages." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "no-required-resource-attributes" -d "Requires all resource ids to contain a corresponding resource attribute.  By default, simple messages will not require metadata, but it is highly recommended as this provides context for the meaning of a message to readers.  Resource attributes are still required for plural messages." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "nullable-getter" -d "Whether or not the localizations class getter is nullable.  By default, this value is set to true so that Localizations.of(context) returns a nullable value for backwards compatibility. If this value is set to false, then a null check is performed on the returned value of Localizations.of(context), removing the need for null checking in user code." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "no-nullable-getter" -d "Whether or not the localizations class getter is nullable.  By default, this value is set to true so that Localizations.of(context) returns a nullable value for backwards compatibility. If this value is set to false, then a null check is performed on the returned value of Localizations.of(context), removing the need for null checking in user code." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "format" -d "When specified, the \"dart format\" command is run after generating the localization files." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "no-format" -d "When specified, the \"dart format\" command is run after generating the localization files." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "use-escaping" -d "Whether or not to use escaping for messages.  By default, this value is set to false for backwards compatibility. Turning this flag on will cause the parser to treat any special characters contained within pairs of single quotes as normal strings and treat all consecutive pairs of single quotes as a single quote character." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "no-use-escaping" -d "Whether or not to use escaping for messages.  By default, this value is set to false for backwards compatibility. Turning this flag on will cause the parser to treat any special characters contained within pairs of single quotes as normal strings and treat all consecutive pairs of single quotes as a single quote character." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "suppress-warnings" -d "When specified, all warnings will be suppressed." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -l "no-suppress-warnings" -d "When specified, all warnings will be suppressed." -n "__fish_seen_subcommand_from gen-l10n"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a pub -d "Commands for managing Flutter packages."
set -l pub_commands add cache deps downgrade get global login logout outdated publish remove run test token upgrade uploader version
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a add -d "Add a dependency to pubspec.yaml."
complete -c flutter -l "offline" -d "Use cached packages instead of accessing the network." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from add"
complete -c flutter -l "no-offline" -d "Use cached packages instead of accessing the network." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from add"
complete -c flutter -l "dry-run" -d "Report what dependencies would change but don't change any." -s n -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from add"
complete -c flutter -l "precompile" -d "Build executables in immediate dependencies." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from add"
complete -c flutter -l "no-precompile" -d "Build executables in immediate dependencies." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from add"
complete -c flutter -l "directory" -d "Run this in the directory <dir>." -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from add"
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a cache -d "Work with the Pub system cache."
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a deps -d "Print package dependencies."
complete -c flutter -l "style" -d "How output should be displayed. [compact, tree (default), list]" -s s -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from deps"
complete -c flutter -l "dev" -d "Whether to include dev dependencies. (defaults to on)" -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from deps"
complete -c flutter -l "no-dev" -d "Whether to include dev dependencies. (defaults to on)" -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from deps"
complete -c flutter -l "executables" -d "List all available executables." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from deps"
complete -c flutter -l "json" -d "Output dependency information in a json format." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from deps"
complete -c flutter -l "directory" -d "Run this in the directory <dir>." -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from deps"
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a downgrade -d "Downgrade packages in a Flutter project."
complete -c flutter -l "offline" -d "Use cached packages instead of accessing the network." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from downgrade"
complete -c flutter -l "no-offline" -d "Use cached packages instead of accessing the network." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from downgrade"
complete -c flutter -l "dry-run" -d "Report what dependencies would change but don't change any." -s n -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from downgrade"
complete -c flutter -l "directory" -d "Run this in the directory <dir>." -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from downgrade"
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a get -d "Get the current package's dependencies."
complete -c flutter -l "offline" -d "Use cached packages instead of accessing the network." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from get"
complete -c flutter -l "no-offline" -d "Use cached packages instead of accessing the network." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from get"
complete -c flutter -l "dry-run" -d "Report what dependencies would change but don't change any." -s n -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from get"
complete -c flutter -l "enforce-lockfile" -d "Enforce pubspec.lock. Fail resolution if pubspec.lock does not satisfy pubspec.yaml" -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from get"
complete -c flutter -l "precompile" -d "Build executables in immediate dependencies." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from get"
complete -c flutter -l "no-precompile" -d "Build executables in immediate dependencies." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from get"
complete -c flutter -l "directory" -d "Run this in the directory <dir>." -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from get"
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a global -d "Work with Pub global packages."
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a login -d "Log into pub.dev."
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a logout -d "Log out of pub.dev."
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a outdated -d "Analyze dependencies to find which ones can be upgraded."
complete -c flutter -l "dependency-overrides" -d "Show resolutions with `dependency_overrides`. (defaults to on)" -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -l "no-dependency-overrides" -d "Show resolutions with `dependency_overrides`. (defaults to on)" -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -l "dev-dependencies" -d "Take dev dependencies into account. (defaults to on)" -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -l "no-dev-dependencies" -d "Take dev dependencies into account. (defaults to on)" -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -l "json" -d "Output the results using a json format." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -l "prereleases" -d "Include prereleases in latest version." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -l "no-prereleases" -d "Include prereleases in latest version." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -l "show-all" -d "Include dependencies that are already fullfilling --mode." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -l "no-show-all" -d "Include dependencies that are already fullfilling --mode." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -l "transitive" -d "Show transitive dependencies." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -l "no-transitive" -d "Show transitive dependencies." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -l "directory" -d "Run this in the directory <dir>." -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from outdated"
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a pub -d "Pass the remaining arguments to Dart's "pub" tool."
complete -c flutter -l "verbose" -d "Print detailed logging." -s v -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from pub"
complete -c flutter -l "color" -d "Use colors in terminal output. Defaults to color when connected to a terminal, and no-color otherwise." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from pub"
complete -c flutter -l "no-color" -d "Use colors in terminal output. Defaults to color when connected to a terminal, and no-color otherwise." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from pub"
complete -c flutter -l "directory" -d "Run the subcommand in the directory<dir>. (defaults to \".\")" -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from pub"
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a publish -d "Publish the current package to pub.dartlang.org."
complete -c flutter -l "dry-run" -d "Validate but do not publish the package." -s n -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from publish"
complete -c flutter -l "force" -d "Publish without confirmation if there are no errors." -s f -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from publish"
complete -c flutter -l "directory" -d "Run this in the directory <dir>." -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from publish"
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a remove -d "Removes a dependency from the current package."
complete -c flutter -l "offline" -d "Use cached packages instead of accessing the network." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from remove"
complete -c flutter -l "no-offline" -d "Use cached packages instead of accessing the network." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from remove"
complete -c flutter -l "dry-run" -d "Report what dependencies would change but don't change any." -s n -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from remove"
complete -c flutter -l "precompile" -d "Precompile executables in immediate dependencies." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from remove"
complete -c flutter -l "no-precompile" -d "Precompile executables in immediate dependencies." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from remove"
complete -c flutter -l "directory" -d "Run this in the directory <dir>." -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from remove"
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a run -d "Run an executable from a package."
complete -c flutter -l "enable-asserts" -d "Enable assert statements." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from run"
complete -c flutter -l "no-enable-asserts" -d "Enable assert statements." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from run"
complete -c flutter -l "enable-experiment" -d "Runs the executable in a VM with the given experiments enabled. (Will disable snapshotting, resulting in slower startup)." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from run"
complete -c flutter -l "directory" -d "Run this in the directory <dir>." -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from run"
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a test -d "Run the "test" package."
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a token -d "Manage authentication tokens for hosted pub repositories."
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a upgrade -d "Upgrade the current package's dependencies to latest versions."
complete -c flutter -l "offline" -d "Use cached packages instead of accessing the network." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from upgrade"
complete -c flutter -l "no-offline" -d "Use cached packages instead of accessing the network." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from upgrade"
complete -c flutter -l "dry-run" -d "Report what dependencies would change but don't change any." -s n -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from upgrade"
complete -c flutter -l "precompile" -d "Precompile executables in immediate dependencies." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from upgrade"
complete -c flutter -l "no-precompile" -d "Precompile executables in immediate dependencies." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from upgrade"
complete -c flutter -l "major-versions" -d "Upgrades packages to their latest resolvable versions, and updates pubspec.yaml." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from upgrade"
complete -c flutter -l "directory" -d "Run this in the directory <dir>." -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from upgrade"
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a uploader -d "Manage uploaders for a package on pub.dev."
complete -c flutter -l "package" -d "The package whose uploaders will be modified. (defaults to the current package)" -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from uploader"
complete -c flutter -l "directory" -d "Run this in the directory <dir>." -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from uploader"
complete -c flutter -f -n "__fish_seen_subcommand_from pub; and not __fish_seen_subcommand_from $pub_commands" -a version -d "Print Pub version."
complete -c flutter -l "verbose" -d "Print detailed logging." -s v -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from version"
complete -c flutter -l "color" -d "Use colors in terminal output. Defaults to color when connected to a terminal, and no-color otherwise." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from version"
complete -c flutter -l "no-color" -d "Use colors in terminal output. Defaults to color when connected to a terminal, and no-color otherwise." -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from version"
complete -c flutter -l "directory" -d "Run the subcommand in the directory<dir>. (defaults to \".\")" -s C -n "__fish_seen_subcommand_from pub;__fish_seen_subcommand_from version"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a run -d "Run your Flutter app on an attached device."
complete -c flutter -l "debug" -d "Build a debug version of your app (default mode)." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "profile" -d "Build a version of your app specialized for performance profiling." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "release" -d "Build a release version of your app." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "jit-release" -d "Build a JIT release version of your app." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "dart-define" -d "Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors. Multiple defines can be passed by repeating \"--dart-define\" multiple times." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "dart-define-from-file" -d "The path of a json format file where flutter define a global constant pool. Json entry will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors; the key and field are json values. Multiple defines can be passed by repeating \"--dart-define-from-file\" multiple times." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "flavor" -d "Build a custom app flavor as defined by platform-specific build setup. Supports the use of product flavors in Android Gradle scripts, and the use of custom Xcode schemes." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-renderer" -d "The renderer implementation to use when building for the web. [auto] (default)                              Use the HTML renderer on mobile devices, and CanvasKit on desktop devices. [canvaskit]                                   Always use the CanvasKit renderer. This renderer uses WebGL and WebAssembly to render graphics. [html]                                        Always use the HTML renderer. This renderer uses a combination of HTML, CSS, SVG, 2D Canvas, and WebGL." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-resources-cdn" -d "Use Web static resources hosted on a CDN. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-web-resources-cdn" -d "Use Web static resources hosted on a CDN. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "native-null-assertions" -d "Enables additional runtime null checks in web applications to ensure the correct nullability of native (such as in dart:html) and external (such as with JS interop) types. This is enabled by default but only takes effect in sound mode. To report an issue with a null assertion failure in dart:html or the other dart web libraries, please file a bug at: https://github.com/dart-lang/sdk/issues/labels/web-libraries (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-native-null-assertions" -d "Enables additional runtime null checks in web applications to ensure the correct nullability of native (such as in dart:html) and external (such as with JS interop) types. This is enabled by default but only takes effect in sound mode. To report an issue with a null assertion failure in dart:html or the other dart web libraries, please file a bug at: https://github.com/dart-lang/sdk/issues/labels/web-libraries (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "bundle-sksl-path" -d "A path to a file containing precompiled SkSL shaders generated during \"flutter run\". These can be included in an application to improve the first frame render times." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "use-application-binary" -d "Specify a pre-built application binary to use when running. For Android applications, this must be the path to an APK. For iOS applications, the path to an IPA. Other device types do not yet support prebuilt application binaries." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "trace-startup" -d "Trace application startup, then exit, saving the trace to a file. By default, this will be saved in the \"build\" directory. If the FLUTTER_TEST_OUTPUTS_DIR environment variable is set, the file will be written there instead." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "cache-startup-profile" -d "Caches the CPU profile collected before the first frame for startup analysis." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-cache-startup-profile" -d "Caches the CPU profile collected before the first frame for startup analysis." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "verbose-system-logs" -d "Include verbose logging from the Flutter engine." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "cache-sksl" -d "Cache the shader in the SkSL format instead of in binary or GLSL formats." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "dump-skp-on-shader-compilation" -d "Automatically dump the skp that triggers new shader compilations. This is useful for writing custom ShaderWarmUp to reduce jank. By default, this is not enabled as it introduces significant overhead. This is only available in profile or debug builds." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "purge-persistent-cache" -d "Removes all existing persistent caches. This allows reproducing shader compilation jank that normally only happens the first time an app is run, or for reliable testing of compilation jank fixes (e.g. shader warm-up)." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "route" -d "Which route to load when running the app." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "vmservice-out-file" -d "A file to write the attached vmservice URL to after an application is started." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "disable-service-auth-codes" -d "(deprecated) Allow connections to the VM service without using authentication codes. (Not recommended! This can open your device to remote code execution attacks!)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "start-paused" -d "Start in a paused mode and wait for a debugger to connect." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-start-paused" -d "Start in a paused mode and wait for a debugger to connect." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "dart-flags" -d "Pass a list of comma separated flags to the Dart instance at application startup. Flags passed through this option must be present on the allowlist defined within the Flutter engine. If a disallowed flag is encountered, the process will be terminated immediately.  This flag is not available on the stable channel and is only applied in debug and profile modes. This option should only be used for experiments and should not be used by typical users." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "endless-trace-buffer" -d "Enable tracing to an infinite buffer, instead of a ring buffer. This is useful when recording large traces. To use an endless buffer to record startup traces, combine this with \"--trace-startup\"." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "trace-systrace" -d "Enable tracing to the system tracer. This is only useful on platforms where such a tracer is available (Android, iOS, macOS and Fuchsia)." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "trace-skia" -d "Enable tracing of Skia code. This is useful when debugging the raster thread (formerly known as the GPU thread). By default, Flutter will not log Skia code, as it introduces significant overhead that may affect recorded performance metrics in a misleading way." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "trace-allowlist" -d "Filters out all trace events except those that are specified in this comma separated list of allowed prefixes." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "trace-skia-allowlist" -d "Filters out all Skia trace events except those that are specified in this comma separated list of allowed prefixes." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "enable-dart-profiling" -d "Whether the Dart VM sampling CPU profiler is enabled. This flag is only meaningful in debug and profile builds. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-enable-dart-profiling" -d "Whether the Dart VM sampling CPU profiler is enabled. This flag is only meaningful in debug and profile builds. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "enable-software-rendering" -d "Enable rendering using the Skia software backend. This is useful when testing Flutter on emulators. By default, Flutter will attempt to either use OpenGL or Vulkan and fall back to software when neither is available." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "skia-deterministic-rendering" -d "When combined with \"--enable-software-rendering\", this should provide completely deterministic (i.e. reproducible) Skia rendering. This is useful for testing purposes (e.g. when comparing screenshots)." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "dart-entrypoint-args" -d "Pass a list of arguments to the Dart entrypoint at application startup. By default this is main(List<String> args). Specify this option multiple times each with one argument to pass multiple arguments to the Dart entrypoint. Currently this is only supported on desktop platforms." -s a -n "__fish_seen_subcommand_from run"
complete -c flutter -l "uninstall-first" -d "Uninstall previous versions of the app on the device before reinstalling. Currently only supported on iOS." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-uninstall-first" -d "Uninstall previous versions of the app on the device before reinstalling. Currently only supported on iOS." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-hostname" -d "The hostname that the web sever will use to resolve an IP to serve from. The unresolved hostname is used to launch Chrome when using the chrome Device. The name \"any\" may also be used to serve on any IPV4 for either the Chrome or web-server device. (defaults to \"localhost\")" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-port" -d "The host port to serve the web application from. If not provided, the tool will select a random open port on the host." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-server-debug-protocol" -d "The protocol (SSE or WebSockets) to use for the debug service proxy when using the Web Server device and Dart Debug extension. This is useful for editors/debug adapters that do not support debugging over SSE (the default protocol for Web Server/Dart Debugger extension). [sse, ws (default)]" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-server-debug-backend-protocol" -d "The protocol (SSE or WebSockets) to use for the Dart Debug Extension backend service when using the Web Server device. Using WebSockets can improve performance but may fail when connecting through some proxy servers. [sse, ws (default)]" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-server-debug-injected-client-protocol" -d "The protocol (SSE or WebSockets) to use for the injected client when using the Web Server device. Using WebSockets can improve performance but may fail when connecting through some proxy servers. [sse, ws (default)]" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-allow-expose-url" -d "Enables daemon-to-editor requests (app.exposeUrl) for exposing URLs when running on remote machines." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-web-allow-expose-url" -d "Enables daemon-to-editor requests (app.exposeUrl) for exposing URLs when running on remote machines." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-run-headless" -d "Launches the browser in headless mode. Currently only Chrome supports this option." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-web-run-headless" -d "Launches the browser in headless mode. Currently only Chrome supports this option." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-browser-debug-port" -d "The debug port the browser should use. If not specified, a random port is selected. Currently only Chrome supports this option. It serves the Chrome DevTools Protocol (https://chromedevtools.github.io/devtools-protocol/)." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-enable-expression-evaluation" -d "Enables expression evaluation in the debugger. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-web-enable-expression-evaluation" -d "Enables expression evaluation in the debugger. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-launch-url" -d "The URL to provide to the browser. Defaults to an HTTP URL with the host name of \"--web-hostname\", the port of \"--web-port\", and the path set to \"/\"." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "web-browser-flag" -d "Additional flag to pass to a browser instance at startup. Chrome: https://www.chromium.org/developers/how-tos/run-chromium-with-flags/ Firefox: https://wiki.mozilla.org/Firefox/CommandLineOptions Multiple flags can be passed by repeating \"--web-browser-flag\" multiple times." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "target" -d "The main entry-point file of the application, as run on the device. If the \"--target\" option is omitted, but a file name is provided on the command line, then that is used instead. (defaults to \"lib/main.dart\")" -s t -n "__fish_seen_subcommand_from run"
complete -c flutter -l "vm-service-port" -d "(deprecated; use host-vmservice-port instead) Listen to the given port for a Dart VM Service connection. Specifying port 0 (the default) will find a random free port. if the Dart Development Service (DDS) is enabled, this will not be the port of the VmService instance advertised on the command line." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "observatory-port" -d "(deprecated; use host-vmservice-port instead) Listen to the given port for a Dart VM Service connection. Specifying port 0 (the default) will find a random free port. if the Dart Development Service (DDS) is enabled, this will not be the port of the VmService instance advertised on the command line." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "device-vmservice-port" -d "Look for vmservice connections only from the specified port. Specifying port 0 (the default) will accept the first vmservice discovered." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "host-vmservice-port" -d "When a device-side vmservice port is forwarded to a host-side port, use this value as the host port. Specifying port 0 (the default) will find a random free host port." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "ipv6" -d "Binds to IPv6 localhost instead of IPv4 when the flutter tool forwards the host port to a device port." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "device-user" -d "Identifier number for a user or work profile on Android only. Run \"adb shell pm list users\" for available identifiers." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "device-timeout" -d "Time in seconds to wait for devices to attach. Longer timeouts may be necessary for networked devices." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "device-connection" -d "Discover devices based on connection type. [attached]                                    Only searches for devices connected by USB or built-in (such as simulators/emulators, MacOS/Windows, Chrome) [both] (default)                              Searches for both attached and wireless devices. [wireless]                                    Only searches for devices connected wirelessly. Discovering wireless devices may take longer." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "dds-port" -d "When this value is provided, the Dart Development Service (DDS) will be bound to the provided port. Specifying port 0 (the default) will find a random free port." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "dds" -d "Enable the Dart Developer Service (DDS). It may be necessary to disable this when attaching to an application with an existing DDS instance (e.g., attaching to an application currently connected to by \"flutter run\"), or when running certain tests. Disabling this feature may degrade IDE functionality if a DDS instance is not already connected to the target application. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-dds" -d "Enable the Dart Developer Service (DDS). It may be necessary to disable this when attaching to an application with an existing DDS instance (e.g., attaching to an application currently connected to by \"flutter run\"), or when running certain tests. Disabling this feature may degrade IDE functionality if a DDS instance is not already connected to the target application. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "disable-dds" -d "(deprecated; use \"--no-dds\" instead) Disable the Dart Developer Service (DDS)." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-disable-dds" -d "(deprecated; use \"--no-dds\" instead) Disable the Dart Developer Service (DDS)." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "devtools" -d "Enable (or disable, with \"--no-devtools\") the launching of the Flutter DevTools debugger and profiler. If specified, \"--devtools-server-address\" is ignored. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-devtools" -d "Enable (or disable, with \"--no-devtools\") the launching of the Flutter DevTools debugger and profiler. If specified, \"--devtools-server-address\" is ignored. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "devtools-server-address" -d "When this value is provided, the Flutter tool will not spin up a new DevTools server instance, and will instead use the one provided at the given address. Ignored if \"--no-devtools\" is specified." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "serve-observatory" -d "Serve the legacy Observatory developer tooling through the VM service." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-serve-observatory" -d "Serve the legacy Observatory developer tooling through the VM service." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "android-gradle-daemon" -d "Whether to enable the Gradle daemon when performing an Android build. Starting the daemon is the default behavior of the gradle wrapper script created in a Flutter project. Setting this flag to false corresponds to passing \"--no-daemon\" to the gradle wrapper script. This flag will cause the daemon process to terminate after the build is completed. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-android-gradle-daemon" -d "Whether to enable the Gradle daemon when performing an Android build. Starting the daemon is the default behavior of the gradle wrapper script created in a Flutter project. Setting this flag to false corresponds to passing \"--no-daemon\" to the gradle wrapper script. This flag will cause the daemon process to terminate after the build is completed. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "android-project-arg" -d "Additional arguments specified as key=value that are passed directly to the gradle project via the -P flag. These can be accessed in build.gradle via the \"project.property\" API." -s P -n "__fish_seen_subcommand_from run"
complete -c flutter -l "fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "enable-impeller" -d "Whether to enable the Impeller rendering engine. Impeller is the default renderer on iOS. On Android, Impeller is available but not the default. This flag will cause Impeller to be used on Android. On other platforms, this flag will be ignored." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-enable-impeller" -d "Whether to enable the Impeller rendering engine. Impeller is the default renderer on iOS. On Android, Impeller is available but not the default. This flag will cause Impeller to be used on Android. On other platforms, this flag will be ignored." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "enable-vulkan-validation" -d "Enable vulkan validation on the Impeller rendering backend if Vulkan is in use and the validation layers are available to the application." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-enable-vulkan-validation" -d "Enable vulkan validation on the Impeller rendering backend if Vulkan is in use and the validation layers are available to the application." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "impeller-force-gl" -d "On platforms that support OpenGL Rendering using Impeller, force rendering using OpenGL over other APIs. If Impeller is not enabled or the platform does not support OpenGL ES, this flag does nothing." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-impeller-force-gl" -d "On platforms that support OpenGL Rendering using Impeller, force rendering using OpenGL over other APIs. If Impeller is not enabled or the platform does not support OpenGL ES, this flag does nothing." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "enable-embedder-api" -d "Whether to enable the experimental embedder API on iOS." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-enable-embedder-api" -d "Whether to enable the experimental embedder API on iOS." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "output-dill" -d "Specify the path to frontend server output kernel file." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "filesystem-root" -d "Specify the path that is used as the root of a virtual file system during compilation. The input file name should be specified as a URL using the scheme given in \"--filesystem-scheme\". Requires the \"--output-dill\" option to be explicitly specified." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "filesystem-scheme" -d "Specify the scheme that is used for virtual file system used in compilation. See also the \"--filesystem-root\" option. (defaults to \"org-dartlang-root\")" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "extra-front-end-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart front end. For example, \"--extra-front-end-options=--enable-experiment=nonfunction-type-aliases\"." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "extra-gen-snapshot-options" -d "A comma-separated list of additional command line arguments that will be passed directly to the Dart native compiler. (Only used in \"--profile\" or \"--release\" builds.) For example, \"--extra-gen-snapshot-options=--no-strip\"." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "enable-experiment" -d "The name of an experimental Dart feature to enable. For more information see: https://github.com/dart-lang/sdk/blob/main/docs/process/experimental-flags.md" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "initialize-from-dill" -d "Initializes the resident compiler with a specific kernel file instead of the default cached location." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "assume-initialize-from-dill-up-to-date" -d "If set, assumes that the file passed in initialize-from-dill is up to date and skip the check and potential invalidation of files." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-assume-initialize-from-dill-up-to-date" -d "If set, assumes that the file passed in initialize-from-dill is up to date and skip the check and potential invalidation of files." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "publish-port" -d "Publish the VM service port over mDNS. Disable to prevent the local network permission app dialog in debug and profile build modes (iOS devices only). (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-publish-port" -d "Publish the VM service port over mDNS. Disable to prevent the local network permission app dialog in debug and profile build modes (iOS devices only). (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "multidex" -d "When enabled, indicates that the app should be built with multidex support. This flag adds the dependencies for multidex when the minimum android sdk is 20 or below. For android sdk versions 21 and above, multidex support is native. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-multidex" -d "When enabled, indicates that the app should be built with multidex support. This flag adds the dependencies for multidex when the minimum android sdk is 20 or below. For android sdk versions 21 and above, multidex support is native. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "ignore-deprecation" -d "Indicates that the app should ignore deprecation warnings and continue to build using deprecated APIs. Use of this flag may cause your app to fail to build when deprecated APIs are removed." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "await-first-frame-when-tracing" -d "Whether to wait for the first frame when tracing startup (\"--trace-startup\"), or just dump the trace as soon as the application is running. The first frame is detected by looking for a Timeline event with the name \"Rasterized first useful frame\". By default, the widgets library's binding takes care of sending this event. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-await-first-frame-when-tracing" -d "Whether to wait for the first frame when tracing startup (\"--trace-startup\"), or just dump the trace as soon as the application is running. The first frame is detected by looking for a Timeline event with the name \"Rasterized first useful frame\". By default, the widgets library's binding takes care of sending this event. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "use-test-fonts" -d "Enable (and default to) the \"Ahem\" font. This is a special font used in tests to remove any dependencies on the font metrics. It is enabled when you use \"flutter test\". Set this flag when running a test using \"flutter run\" for debugging purposes. This flag is only available when running in debug mode." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-use-test-fonts" -d "Enable (and default to) the \"Ahem\" font. This is a special font used in tests to remove any dependencies on the font metrics. It is enabled when you use \"flutter test\". Set this flag when running a test using \"flutter run\" for debugging purposes. This flag is only available when running in debug mode." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "build" -d "If necessary, build the app before running. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-build" -d "If necessary, build the app before running. (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "project-root" -d "Specify the project root directory." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "machine" -d "Handle machine structured JSON command input and provide output and progress in machine friendly format." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "hot" -d "Run with support for hot reloading. Only available for debug mode. Not available with \"--trace-startup\". (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-hot" -d "Run with support for hot reloading. Only available for debug mode. Not available with \"--trace-startup\". (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "resident" -d "Stay resident after launching the application. Not available with \"--trace-startup\". (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-resident" -d "Stay resident after launching the application. Not available with \"--trace-startup\". (defaults to on)" -n "__fish_seen_subcommand_from run"
complete -c flutter -l "pid-file" -d "Specify a file to write the process ID to. You can send SIGUSR1 to trigger a hot reload and SIGUSR2 to trigger a hot restart. The file is created when the signal handlers are hooked and deleted when they are removed." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "report-ready" -d "Print \"ready\" to the console after handling a keyboard command. This is primarily useful for tests and other automation, but consider using \"--machine\" instead." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-report-ready" -d "Print \"ready\" to the console after handling a keyboard command. This is primarily useful for tests and other automation, but consider using \"--machine\" instead." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "benchmark" -d "Enable a benchmarking mode. This will run the given application, measure the startup time and the app restart time, write the results out to \"refresh_benchmark.json\", and exit. This flag is intended for use in generating automated flutter benchmarks." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "fast-start" -d "Whether to quickly bootstrap applications with a minimal app. Currently this is only supported on Android devices. This option cannot be paired with \"--use-application-binary\"." -n "__fish_seen_subcommand_from run"
complete -c flutter -l "no-fast-start" -d "Whether to quickly bootstrap applications with a minimal app. Currently this is only supported on Android devices. This option cannot be paired with \"--use-application-binary\"." -n "__fish_seen_subcommand_from run"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a test -d "Run Flutter unit tests for the current project."
complete -c flutter -l "pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "no-pub" -d "Whether to run \"flutter pub get\" before executing this command. (defaults to on)" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "no-track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "enable-experiment" -d "The name of an experimental Dart feature to enable. For more information see: https://github.com/dart-lang/sdk/blob/main/docs/process/experimental-flags.md" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "dart-define" -d "Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors. Multiple defines can be passed by repeating \"--dart-define\" multiple times." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "dart-define-from-file" -d "The path of a json format file where flutter define a global constant pool. Json entry will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors; the key and field are json values. Multiple defines can be passed by repeating \"--dart-define-from-file\" multiple times." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "web-renderer" -d "The renderer implementation to use when building for the web. [auto] (default)                              Use the HTML renderer on mobile devices, and CanvasKit on desktop devices. [canvaskit]                                   Always use the CanvasKit renderer. This renderer uses WebGL and WebAssembly to render graphics. [html]                                        Always use the HTML renderer. This renderer uses a combination of HTML, CSS, SVG, 2D Canvas, and WebGL." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "device-user" -d "Identifier number for a user or work profile on Android only. Run \"adb shell pm list users\" for available identifiers." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "flavor" -d "Build a custom app flavor as defined by platform-specific build setup. Supports the use of product flavors in Android Gradle scripts, and the use of custom Xcode schemes." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "name" -d "A regular expression matching substrings of the names of tests to run." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "plain-name" -d "A plain-text substring of the names of tests to run." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "tags" -d "Run only tests associated with the specified tags. See: https://pub.dev/packages/test#tagging-tests" -s t -n "__fish_seen_subcommand_from test"
complete -c flutter -l "exclude-tags" -d "Run only tests that do not have the specified tags. See: https://pub.dev/packages/test#tagging-tests" -s x -n "__fish_seen_subcommand_from test"
complete -c flutter -l "start-paused" -d "Start in a paused mode and wait for a debugger to connect. You must specify a single test file to run, explicitly. Instructions for connecting with a debugger are printed to the console once the test has started." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "run-skipped" -d "Run skipped tests instead of skipping them." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "no-run-skipped" -d "Run skipped tests instead of skipping them." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "disable-service-auth-codes" -d "(deprecated) Allow connections to the VM service without using authentication codes. (Not recommended! This can open your device to remote code execution attacks!)" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "coverage" -d "Whether to collect coverage information." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "merge-coverage" -d "Whether to merge coverage data with \"coverage/lcov.base.info\". Implies collecting coverage data. (Requires lcov.)" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "branch-coverage" -d "Whether to collect branch coverage information. Implies collecting coverage data." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "ipv6" -d "Whether to use IPv6 for the test harness server socket." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "coverage-path" -d "Where to store coverage information (if coverage is enabled). (defaults to \"coverage/lcov.info\")" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "machine" -d "Handle machine structured JSON command input and provide output and progress in machine friendly format." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "update-goldens" -d "Whether \"matchesGoldenFile()\" calls within your test methods should update the golden files rather than test for an existing match." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "concurrency" -d "The number of concurrent test processes to run. This will be ignored when running integration tests. (defaults to \"1\")" -s j -n "__fish_seen_subcommand_from test"
complete -c flutter -l "test-assets" -d "Whether to build the assets bundle for testing. This takes additional time before running the tests. Consider using \"--no-test-assets\" if assets are not required. (defaults to on)" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "no-test-assets" -d "Whether to build the assets bundle for testing. This takes additional time before running the tests. Consider using \"--no-test-assets\" if assets are not required. (defaults to on)" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "platform" -d "Selects the test backend. [chrome]                                      (deprecated) Run tests using the Google Chrome web browser. This value is intended for testing the Flutter framework itself and may be removed at any time. [tester] (default)                            Run tests using the VM-based test environment." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "test-randomize-ordering-seed" -d "The seed to randomize the execution order of test cases within test files. Must be a 32bit unsigned integer or the string \"random\", which indicates that a seed should be selected randomly. By default, tests run in the order they are declared." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "total-shards" -d "Tests can be sharded with the \"--total-shards\" and \"--shard-index\" arguments, allowing you to split up your test suites and run them separately." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "shard-index" -d "Tests can be sharded with the \"--total-shards\" and \"--shard-index\" arguments, allowing you to split up your test suites and run them separately." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "enable-vmservice" -d "Enables the VM service without \"--start-paused\". This flag is intended for use with tests that will use \"dart:developer\" to interact with the VM service at runtime. This flag is ignored if \"--start-paused\" or coverage are requested, as the VM service will be enabled in those cases regardless." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "no-enable-vmservice" -d "Enables the VM service without \"--start-paused\". This flag is intended for use with tests that will use \"dart:developer\" to interact with the VM service at runtime. This flag is ignored if \"--start-paused\" or coverage are requested, as the VM service will be enabled in those cases regardless." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "reporter" -d "Set how to print test results. If unset, value will default to either compact or expanded. [compact]                                     A single line that updates dynamically (The default reporter). [expanded]                                    A separate line for each update. May be preferred when logging to a file or in continuous integration. [github]                                      A custom reporter for GitHub Actions (the default reporter when running on GitHub Actions). [json]                                        A machine-readable format. See: https://dart.dev/go/test-docs/json_reporter.md" -s r -n "__fish_seen_subcommand_from test"
complete -c flutter -l "file-reporter" -d "Enable an additional reporter writing test results to a file. Should be in the form <reporter>:<filepath>, Example: \"json:reports/tests.json\"." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "timeout" -d "The default test timeout, specified either in seconds (e.g. \"60s\"), as a multiplier of the default timeout (e.g. \"2x\"), or as the string \"none\" to disable the timeout entirely." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "dds-port" -d "When this value is provided, the Dart Development Service (DDS) will be bound to the provided port. Specifying port 0 (the default) will find a random free port." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "dds" -d "Enable the Dart Developer Service (DDS). It may be necessary to disable this when attaching to an application with an existing DDS instance (e.g., attaching to an application currently connected to by \"flutter run\"), or when running certain tests. Disabling this feature may degrade IDE functionality if a DDS instance is not already connected to the target application. (defaults to on)" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "no-dds" -d "Enable the Dart Developer Service (DDS). It may be necessary to disable this when attaching to an application with an existing DDS instance (e.g., attaching to an application currently connected to by \"flutter run\"), or when running certain tests. Disabling this feature may degrade IDE functionality if a DDS instance is not already connected to the target application. (defaults to on)" -n "__fish_seen_subcommand_from test"
complete -c flutter -l "disable-dds" -d "(deprecated; use \"--no-dds\" instead) Disable the Dart Developer Service (DDS)." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "no-disable-dds" -d "(deprecated; use \"--no-dds\" instead) Disable the Dart Developer Service (DDS)." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "serve-observatory" -d "Serve the legacy Observatory developer tooling through the VM service." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "no-serve-observatory" -d "Serve the legacy Observatory developer tooling through the VM service." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from test"
complete -c flutter -l "no-fatal-warnings" -d "Causes the command to fail if warnings are sent to the console during its execution." -n "__fish_seen_subcommand_from test"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a attach -d "Attach to a running app."
complete -c flutter -l "debug" -d "Build a debug version of your app (default mode)." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "profile" -d "Build a version of your app specialized for performance profiling." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "target" -d "The main entry-point file of the application, as run on the device. If the \"--target\" option is omitted, but a file name is provided on the command line, then that is used instead. (defaults to \"lib/main.dart\")" -s t -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "vm-service-port" -d "(deprecated; use host-vmservice-port instead) Listen to the given port for a Dart VM Service connection. Specifying port 0 (the default) will find a random free port. if the Dart Development Service (DDS) is enabled, this will not be the port of the VmService instance advertised on the command line." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "observatory-port" -d "(deprecated; use host-vmservice-port instead) Listen to the given port for a Dart VM Service connection. Specifying port 0 (the default) will find a random free port. if the Dart Development Service (DDS) is enabled, this will not be the port of the VmService instance advertised on the command line." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "device-vmservice-port" -d "Look for vmservice connections only from the specified port. Specifying port 0 (the default) will accept the first vmservice discovered." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "host-vmservice-port" -d "When a device-side vmservice port is forwarded to a host-side port, use this value as the host port. Specifying port 0 (the default) will find a random free host port." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "ipv6" -d "Binds to IPv6 localhost instead of IPv4 when the flutter tool forwards the host port to a device port." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "output-dill" -d "Specify the path to frontend server output kernel file." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "filesystem-root" -d "Specify the path that is used as the root of a virtual file system during compilation. The input file name should be specified as a URL using the scheme given in \"--filesystem-scheme\". Requires the \"--output-dill\" option to be explicitly specified." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "filesystem-scheme" -d "Specify the scheme that is used for virtual file system used in compilation. See also the \"--filesystem-root\" option. (defaults to \"org-dartlang-root\")" -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "target-model" -d "Target model that determines what core libraries are available. [flutter (default), flutter_runner]" -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "module" -d "The name of the module (required if attaching to a fuchsia device)." -s m -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "dart-define" -d "Additional key-value pairs that will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors. Multiple defines can be passed by repeating \"--dart-define\" multiple times." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "dart-define-from-file" -d "The path of a json format file where flutter define a global constant pool. Json entry will be available as constants from the String.fromEnvironment, bool.fromEnvironment, int.fromEnvironment, and double.fromEnvironment constructors; the key and field are json values. Multiple defines can be passed by repeating \"--dart-define-from-file\" multiple times." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "device-user" -d "Identifier number for a user or work profile on Android only. Run \"adb shell pm list users\" for available identifiers." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "enable-experiment" -d "The name of an experimental Dart feature to enable. For more information see: https://github.com/dart-lang/sdk/blob/main/docs/process/experimental-flags.md" -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "initialize-from-dill" -d "Initializes the resident compiler with a specific kernel file instead of the default cached location." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "assume-initialize-from-dill-up-to-date" -d "If set, assumes that the file passed in initialize-from-dill is up to date and skip the check and potential invalidation of files." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "no-assume-initialize-from-dill-up-to-date" -d "If set, assumes that the file passed in initialize-from-dill is up to date and skip the check and potential invalidation of files." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "debug-port" -d "(deprecated) Device port where the Dart VM Service is listening. Requires \"--disable-service-auth-codes\" to also be provided to the Flutter application at launch, otherwise this command will fail to connect to the application. In general, \"--debug-url\" should be used instead." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "debug-url" -d "The URL at which the Dart VM Service is listening." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "app-id" -d "The package name (Android) or bundle identifier (iOS) for the app. This can be specified to avoid being prompted if multiple Dart VM Service ports are advertised. If you have multiple devices or emulators running, you should include the device hostname as well, e.g. \"com.example.myApp@my-iphone\". This parameter is case-insensitive." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "pid-file" -d "Specify a file to write the process ID to. You can send SIGUSR1 to trigger a hot reload and SIGUSR2 to trigger a hot restart. The file is created when the signal handlers are hooked and deleted when they are removed." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "report-ready" -d "Print \"ready\" to the console after handling a keyboard command. This is primarily useful for tests and other automation, but consider using \"--machine\" instead." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "no-report-ready" -d "Print \"ready\" to the console after handling a keyboard command. This is primarily useful for tests and other automation, but consider using \"--machine\" instead." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "project-root" -d "Normally used only in run target." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "machine" -d "Handle machine structured JSON command input and provide output and progress in machine-friendly format." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "no-track-widget-creation" -d "Track widget creation locations. This enables features such as the widget inspector. This parameter is only functional in debug mode (i.e. when compiling JIT, not AOT). (defaults to on)" -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "dds-port" -d "When this value is provided, the Dart Development Service (DDS) will be bound to the provided port. Specifying port 0 (the default) will find a random free port." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "dds" -d "Enable the Dart Developer Service (DDS). It may be necessary to disable this when attaching to an application with an existing DDS instance (e.g., attaching to an application currently connected to by \"flutter run\"), or when running certain tests. Disabling this feature may degrade IDE functionality if a DDS instance is not already connected to the target application. (defaults to on)" -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "no-dds" -d "Enable the Dart Developer Service (DDS). It may be necessary to disable this when attaching to an application with an existing DDS instance (e.g., attaching to an application currently connected to by \"flutter run\"), or when running certain tests. Disabling this feature may degrade IDE functionality if a DDS instance is not already connected to the target application. (defaults to on)" -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "disable-dds" -d "(deprecated; use \"--no-dds\" instead) Disable the Dart Developer Service (DDS)." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "no-disable-dds" -d "(deprecated; use \"--no-dds\" instead) Disable the Dart Developer Service (DDS)." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "devtools" -d "Enable (or disable, with \"--no-devtools\") the launching of the Flutter DevTools debugger and profiler. If specified, \"--devtools-server-address\" is ignored. (defaults to on)" -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "no-devtools" -d "Enable (or disable, with \"--no-devtools\") the launching of the Flutter DevTools debugger and profiler. If specified, \"--devtools-server-address\" is ignored. (defaults to on)" -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "devtools-server-address" -d "When this value is provided, the Flutter tool will not spin up a new DevTools server instance, and will instead use the one provided at the given address. Ignored if \"--no-devtools\" is specified." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "serve-observatory" -d "Serve the legacy Observatory developer tooling through the VM service." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "no-serve-observatory" -d "Serve the legacy Observatory developer tooling through the VM service." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "device-timeout" -d "Time in seconds to wait for devices to attach. Longer timeouts may be necessary for networked devices." -n "__fish_seen_subcommand_from attach"
complete -c flutter -l "device-connection" -d "Discover devices based on connection type. [attached]                                    Only searches for devices connected by USB or built-in (such as simulators/emulators, MacOS/Windows, Chrome) [both] (default)                              Searches for both attached and wireless devices. [wireless]                                    Only searches for devices connected wirelessly. Discovering wireless devices may take longer." -n "__fish_seen_subcommand_from attach"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a custom-devices -d "List, reset, add and delete custom devices."
set -l custom_devices_commands add delete list reset
complete -c flutter -f -n "__fish_seen_subcommand_from custom-devices; and not __fish_seen_subcommand_from $custom_devices_commands" -a add -d "Add a new device the custom devices config file."
complete -c flutter -l "check" -d "Make sure the config actually works. This will execute some of the commands in the config (if necessary with dummy arguments). This flag is enabled by default when \"--json\" is not specified. If \"--json\" is given, it is disabled by default. For example, a config with \"null\" as the \"runDebug\" command is invalid. If the \"runDebug\" command is valid (so it is an array of strings) but the command is not found (because you have a typo, for example), the config won't work and \"--check\" will spot that." -n "__fish_seen_subcommand_from custom-devices;__fish_seen_subcommand_from add"
complete -c flutter -l "no-check" -d "Make sure the config actually works. This will execute some of the commands in the config (if necessary with dummy arguments). This flag is enabled by default when \"--json\" is not specified. If \"--json\" is given, it is disabled by default. For example, a config with \"null\" as the \"runDebug\" command is invalid. If the \"runDebug\" command is valid (so it is an array of strings) but the command is not found (because you have a typo, for example), the config won't work and \"--check\" will spot that." -n "__fish_seen_subcommand_from custom-devices;__fish_seen_subcommand_from add"
complete -c flutter -l "json" -d "\"pi\", ...}>    Add the custom device described by this JSON-encoded string to the list of custom-devices instead of using the normal, interactive way of configuring. Useful if you want to use the \"flutter custom-devices add\" command from a script, or use it non-interactively for some other reason. By default, this won't check whether the passed in config actually works. For more info see the \"--check\" option." -n "__fish_seen_subcommand_from custom-devices;__fish_seen_subcommand_from add"
complete -c flutter -l "ssh" -d "Add a ssh-device. This will automatically fill out some of the config options for you with good defaults, and in other cases save you some typing. So you'll only need to enter some things like hostname and username of the remote device instead of entering each individual command. (defaults to on)" -n "__fish_seen_subcommand_from custom-devices;__fish_seen_subcommand_from add"
complete -c flutter -f -n "__fish_seen_subcommand_from custom-devices; and not __fish_seen_subcommand_from $custom_devices_commands" -a delete -d "Delete a device from the config file."
complete -c flutter -f -n "__fish_seen_subcommand_from custom-devices; and not __fish_seen_subcommand_from $custom_devices_commands" -a list -d "List the currently configured custom devices, both enabled and disabled, reachable or not."
complete -c flutter -f -n "__fish_seen_subcommand_from custom-devices; and not __fish_seen_subcommand_from $custom_devices_commands" -a reset -d "Reset the config file to the default."
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a daemon -d "Run a persistent, JSON-RPC based server to communicate with devices."
complete -c flutter -l "listen-on-tcp-port" -d "If specified, the daemon will be listening for commands on the specified port instead of stdio." -n "__fish_seen_subcommand_from daemon"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a debug-adapter -d "Run a Debug Adapter Protocol (DAP) server to communicate with the Flutter tool."
complete -c flutter -l "ipv6" -d "Binds to IPv6 localhost instead of IPv4 when the flutter tool forwards the host port to a device port." -n "__fish_seen_subcommand_from debug-adapter"
complete -c flutter -l "dds-port" -d "When this value is provided, the Dart Development Service (DDS) will be bound to the provided port. Specifying port 0 (the default) will find a random free port." -n "__fish_seen_subcommand_from debug-adapter"
complete -c flutter -l "dds" -d "Enable the Dart Developer Service (DDS). It may be necessary to disable this when attaching to an application with an existing DDS instance (e.g., attaching to an application currently connected to by \"flutter run\"), or when running certain tests. Disabling this feature may degrade IDE functionality if a DDS instance is not already connected to the target application. (defaults to on)" -n "__fish_seen_subcommand_from debug-adapter"
complete -c flutter -l "no-dds" -d "Enable the Dart Developer Service (DDS). It may be necessary to disable this when attaching to an application with an existing DDS instance (e.g., attaching to an application currently connected to by \"flutter run\"), or when running certain tests. Disabling this feature may degrade IDE functionality if a DDS instance is not already connected to the target application. (defaults to on)" -n "__fish_seen_subcommand_from debug-adapter"
complete -c flutter -l "disable-dds" -d "(deprecated; use \"--no-dds\" instead) Disable the Dart Developer Service (DDS)." -n "__fish_seen_subcommand_from debug-adapter"
complete -c flutter -l "no-disable-dds" -d "(deprecated; use \"--no-dds\" instead) Disable the Dart Developer Service (DDS)." -n "__fish_seen_subcommand_from debug-adapter"
complete -c flutter -l "test" -d "Whether to use the \"flutter test\" debug adapter to run tests and emit custom events for test progress/results." -n "__fish_seen_subcommand_from debug-adapter"
complete -c flutter -l "no-test" -d "Whether to use the \"flutter test\" debug adapter to run tests and emit custom events for test progress/results." -n "__fish_seen_subcommand_from debug-adapter"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a devices -d "List all connected devices."
complete -c flutter -l "machine" -d "Output device information in machine readable structured JSON format." -n "__fish_seen_subcommand_from devices"
complete -c flutter -l "timeout" -d "(deprecated) This option has been replaced by \"--device-timeout\"." -s t -n "__fish_seen_subcommand_from devices"
complete -c flutter -l "device-timeout" -d "Time in seconds to wait for devices to attach. Longer timeouts may be necessary for networked devices." -n "__fish_seen_subcommand_from devices"
complete -c flutter -l "device-connection" -d "Discover devices based on connection type. [attached]          Only searches for devices connected by USB or built-in (such as simulators/emulators, MacOS/Windows, Chrome) [both] (default)    Searches for both attached and wireless devices. [wireless]          Only searches for devices connected wirelessly. Discovering wireless devices may take longer." -n "__fish_seen_subcommand_from devices"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a emulators -d "List, launch and create emulators."
complete -c flutter -l "launch" -d "The full or partial ID of the emulator to launch." -n "__fish_seen_subcommand_from emulators" -xa "(__fish_flutter_emulators)"
complete -c flutter -l "cold" -d "Used with the \"--launch\" flag to cold boot the emulator instance (Android only)." -n "__fish_seen_subcommand_from emulators"
complete -c flutter -l "create" -d "Creates a new Android emulator based on a Pixel device." -n "__fish_seen_subcommand_from emulators"
complete -c flutter -l "name" -d "Used with the \"--create\" flag. Specifies a name for the emulator being created." -n "__fish_seen_subcommand_from emulators"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a install -d "Install a Flutter app on an attached device."
complete -c flutter -l "debug" -d "Build a debug version of your app." -n "__fish_seen_subcommand_from install"
complete -c flutter -l "profile" -d "Build a version of your app specialized for performance profiling." -n "__fish_seen_subcommand_from install"
complete -c flutter -l "release" -d "Build a release version of your app (default mode)." -n "__fish_seen_subcommand_from install"
complete -c flutter -l "jit-release" -d "Build a JIT release version of your app (default mode)." -n "__fish_seen_subcommand_from install"
complete -c flutter -l "use-application-binary" -d "Specify a pre-built application binary to use when running. For Android applications, this must be the path to an APK. For iOS applications, the path to an IPA. Other device types do not yet support prebuilt application binaries." -n "__fish_seen_subcommand_from install"
complete -c flutter -l "device-timeout" -d "Time in seconds to wait for devices to attach. Longer timeouts may be necessary for networked devices." -n "__fish_seen_subcommand_from install"
complete -c flutter -l "device-connection" -d "Discover devices based on connection type. [attached]                              Only searches for devices connected by USB or built-in (such as simulators/emulators, MacOS/Windows, Chrome) [both] (default)                        Searches for both attached and wireless devices. [wireless]                              Only searches for devices connected wirelessly. Discovering wireless devices may take longer." -n "__fish_seen_subcommand_from install"
complete -c flutter -l "device-user" -d "Identifier number for a user or work profile on Android only. Run \"adb shell pm list users\" for available identifiers." -n "__fish_seen_subcommand_from install"
complete -c flutter -l "flavor" -d "Build a custom app flavor as defined by platform-specific build setup. Supports the use of product flavors in Android Gradle scripts, and the use of custom Xcode schemes." -n "__fish_seen_subcommand_from install"
complete -c flutter -l "uninstall-only" -d "Uninstall the app if already on the device. Skip install." -n "__fish_seen_subcommand_from install"
complete -c flutter -l "no-uninstall-only" -d "Uninstall the app if already on the device. Skip install." -n "__fish_seen_subcommand_from install"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a logs -d "Show log output for running Flutter apps."
complete -c flutter -l "clear" -d "Clear log history before reading from logs." -s c -n "__fish_seen_subcommand_from logs"
complete -c flutter -l "device-timeout" -d "Time in seconds to wait for devices to attach. Longer timeouts may be necessary for networked devices." -n "__fish_seen_subcommand_from logs"
complete -c flutter -l "device-connection" -d "Discover devices based on connection type. [attached]          Only searches for devices connected by USB or built-in (such as simulators/emulators, MacOS/Windows, Chrome) [both] (default)    Searches for both attached and wireless devices. [wireless]          Only searches for devices connected wirelessly. Discovering wireless devices may take longer." -n "__fish_seen_subcommand_from logs"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a screenshot -d "Take a screenshot from a connected device."
complete -c flutter -l "out" -d "Location to write the screenshot." -s o -n "__fish_seen_subcommand_from screenshot"
complete -c flutter -l "vm-service-url" -d "The VM Service URL to which to connect. This is required when \"--type\" is \"skia\" or \"rasterizer\". To find the VM service URL, use \"flutter run\" and look for \"A Dart VM Service ... is available at\" in the output." -n "__fish_seen_subcommand_from screenshot"
complete -c flutter -l "type" -d "The type of screenshot to retrieve. [device] (default)    Delegate to the device's native screenshot capabilities. This screenshots the entire screen currently being displayed (including content not rendered by Flutter, like the device status bar). [rasterizer]          Render the Flutter app using the rasterizer. Requires \"--vm-service-url.\" [skia]                Render the Flutter app as a Skia picture. Requires \"--vm-service-url\"." -n "__fish_seen_subcommand_from screenshot"
complete -c flutter -l "device-timeout" -d "Time in seconds to wait for devices to attach. Longer timeouts may be necessary for networked devices." -n "__fish_seen_subcommand_from screenshot"
complete -c flutter -l "device-connection" -d "Discover devices based on connection type. [attached]            Only searches for devices connected by USB or built-in (such as simulators/emulators, MacOS/Windows, Chrome) [both] (default)      Searches for both attached and wireless devices. [wireless]            Only searches for devices connected wirelessly. Discovering wireless devices may take longer." -n "__fish_seen_subcommand_from screenshot"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a symbolize -d "Symbolize a stack trace from an AOT-compiled Flutter app."
complete -c flutter -l "debug-info" -d "A path to the symbols file generated with \"--split-debug-info\"." -s d -n "__fish_seen_subcommand_from symbolize"
complete -c flutter -l "input" -d "A file path containing a Dart stack trace." -s i -n "__fish_seen_subcommand_from symbolize"
complete -c flutter -l "output" -d "A file path for a symbolized stack trace to be written to." -s o -n "__fish_seen_subcommand_from symbolize"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "Welcome to Flutter! - https://flutter.dev                  ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "The Flutter tool uses Google Analytics to anonymously report feature usage ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "statistics and basic crash reports. This data is used to help improve      ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "Flutter tools over time.                                                   ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "Flutter tool analytics are not sent on the very first run. To disable      ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "reporting, type 'flutter config --no-analytics'. To display the current    ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "setting, type 'flutter config'. If you opt out of analytics, an opt-out    ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "event will be sent, and then no further information will be sent by the    ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "Flutter tool.                                                              ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "By downloading the Flutter SDK, you agree to the Google Terms of Service.  ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "Note: The Google Privacy Policy describes how data is handled in this      ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "service.                                                                   ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "Moreover, Flutter includes the Dart SDK, which may send usage metrics and  ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "crash reports to Google.                                                   ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "Read about data we send with crash reports:                                ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "https://flutter.dev/docs/reference/crash-reporting                         ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "See Google's privacy policy:                                               ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a ║ -d "https://policies.google.com/privacy                                        ║"
complete -c flutter -f -n "not __fish_seen_subcommand_from $commands" -a help -d ""
